work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
NUM_ELVES <- 900; s_toy <- 100; l_toy <- 720; train_elf <- 0.5; overwork_elf <- 3.9
load('data/toys_regulated.RData')
toys <- toys[order(toys[,2]+toys[,3], toys[,2]),]
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys, myelves)
read.csv('toys_submission_classification.csv', stringsAsList=F)
submit_baseline <- read.csv('toys_submission_classification.csv', stringsAsFactors=F)
head(submit_baseline)
submit_baseline[1, 1:2]
benchmark_schedule <- data.matrix(submit_baseline[, 1:2])
dim(benchmark_schedule)
save(benchmark_schedule, file='R code/benchmark_schedule.RData')
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
load('data/toys.RData')
load('R code/benchmark_schedule.RData')
### f(x) ###
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToysID'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'elf_id']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
}
return((outcomes[nrow(outcomes), 3]+outcomes[nrow(outcomes), 4])*log(901))
}
### Submit ###
solution_Elf_submit <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
}
return(outcomes)
}
myToys <- toys; rm(toys)
schedule <- benchmark_schedule ## last optimal solution xbest(toyID, elfID)
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
### parameters ###
C <- 10 # multiple cooling chain
N0 <- runif(C)*nrow(myToys) # initial point
h <- 10 # used to modulate the step length.
S <- 10 # current value times, step width
x0 <- schedule; fx0 <- solution_Elf(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
head(x0)
myToys <- myToys[x0[,'ToyId'],]
### f(x) ###
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'elf_id']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
}
return((outcomes[nrow(outcomes), 3]+outcomes[nrow(outcomes), 4])*log(901))
}
### Submit ###
solution_Elf_submit <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
}
return(outcomes)
}
x0 <- schedule; fx0 <- solution_Elf(myToys, myelves, x0)
head(schedule)
### f(x) ###
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
}
return((outcomes[nrow(outcomes), 3]+outcomes[nrow(outcomes), 4])*log(901))
}
### Submit ###
solution_Elf_submit <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
}
return(outcomes)
}
x0 <- schedule; fx0 <- solution_Elf(myToys, myelves, x0)
fx0
fx0
fx0/log(901)
261161276 * log(901)
head(x0)
schedule[,'ToyId']
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToyId'],]
current_toy <- 100
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_toy_id
c_toy_arrival
c_toy_duration
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
c_elf_id
current_toy <- 10000
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
c_elf_id
c_elf_start_time
c_elf_rating
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
c_elf_start_time
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
work_duration
myelves[, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
myelves[c_elf_id, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
myelves
### f(x) ###
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
}
return((outcomes[nrow(outcomes), 3]+outcomes[nrow(outcomes), 4])*log(901))
}
### Submit ###
solution_Elf_submit <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
}
return(outcomes)
}
### f(x) ###
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return((outcomes[nrow(outcomes), 3]+outcomes[nrow(outcomes), 4])*log(901))
}
### Submit ###
solution_Elf_submit <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return(outcomes)
}
x0 <- schedule; fx0 <- solution_Elf(myToys, myelves, x0)
gc(); rm(list=ls())
source('R code/Functions.R')
load('data/toys.RData')
load('R code/benchmark_schedule.RData')
### f(x) ###
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return((outcomes[nrow(outcomes), 3]+outcomes[nrow(outcomes), 4])*log(901))
}
### Submit ###
solution_Elf_submit <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return(outcomes)
}
### Toys establishment ###
myToys <- toys; rm(toys)
schedule <- benchmark_schedule ## last optimal solution xbest(toyID, elfID)
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
### parameters ###
C <- 10 # multiple cooling chain
N0 <- runif(C)*nrow(myToys) # initial point
h <- 10 # used to modulate the step length.
S <- 10 # current value times, step width
x0 <- schedule; fx0 <- solution_Elf(myToys, myelves, x0)
### f(x) ###
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return((outcomes[nrow(outcomes), 3]+outcomes[nrow(outcomes), 4])*log(901))
}
x0 <- schedule; fx0 <- solution_Elf(myToys, myelves, x0)
fx0
fx0
C <- 3 # multiple cooling chain
N0 <- runif(C)*nrow(myToys) # initial point
h <- 5 # used to modulate the step length.
S <- 5 # current value times, step width
xbest <- x0; fbest <- fx0
### main loop ###
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', fbest))
bk_s <- 0
for (s in 1:S){
cat(paste('\n - Step:',s))
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
bk <-0
for (np in 1:num){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
x1 <- xbest
x1[partition_1:partition_2, 'toyID'] <- sample(x1[partition_1:partition_2, 'toyID']) ## reallocate Toys to a random chosen group of Elves
fx1 <- solution_Elf(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',delta, '!!!'))
cat(paste('\n -- Find Global Improvement!!! Current Score:',fbest))
}else{
bk <- bk + 1
if (bk > 3){
bk_s <- bk_s + 1
break
}
}
}
if (bk_s > 3) break
}
}
head(x0)
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', fbest))
bk_s <- 0
for (s in 1:S){
cat(paste('\n - Step:',s))
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
bk <-0
for (np in 1:num){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
x1 <- xbest
x1[partition_1:partition_2, 'ToyId'] <- sample(x1[partition_1:partition_2, 'ToyId']) ## reallocate Toys to a random chosen group of Elves
fx1 <- solution_Elf(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',delta, '!!!'))
cat(paste('\n -- Find Global Improvement!!! Current Score:',fbest))
}else{
bk <- bk + 1
if (bk > 3){
bk_s <- bk_s + 1
break
}
}
}
if (bk_s > 3) break
}
}
### f(x) ###
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
if(current_toy %% 2000000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return((outcomes[nrow(outcomes), 3]+outcomes[nrow(outcomes), 4])*log(901))
}
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', fbest))
bk_s <- 0
for (s in 1:S){
cat(paste('\n - Step:',s))
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
bk <-0
for (np in 1:num){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
x1 <- xbest
x1[partition_1:partition_2, 'ToyId'] <- sample(x1[partition_1:partition_2, 'ToyId']) ## reallocate Toys to a random chosen group of Elves
fx1 <- solution_Elf(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',delta, '!!!'))
cat(paste('\n -- Find Global Improvement!!! Current Score:',fbest))
}else{
bk <- bk + 1
if (bk > 3){
bk_s <- bk_s + 1
break
}
}
}
if (bk_s > 3) break
}
}
fbest
fbest*log(901)
xbest
fbest
save(xbest, file='R_results/submit_1866324812.RData')
submit_best <- solution_Elf_submit(myToys, myelves, xbest)
head(submit_best)
submit_best
write.csv(submit_best, 'toys_submission_1866324812.csv', row.names = FALSE)
library(compiler)
enableJIT(3)
submit_best_2 <- solution_Elf_submit(myToys, myelves, xbest)
enableJIT(1)
submit_best_2 <- solution_Elf_submit(myToys, myelves, xbest)
c_soultion_Elf <- cmpfun(solution_Elf_submit)
submit_best_2 <- c_soultion_Elf(myToys, myelves, xbest)
