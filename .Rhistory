gc()
gc()
library(doMC)
registerDoMC(cores = 1)
gc()
registerDoMC(cores = NULL)
install.packages(c("AICcmodavg", "deSolve", "Ecfun", "evtree", "highr", "knitr", "mboost", "mime", "minqa", "pcaPP", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "rjags", "rjson", "rmarkdown", "RSQLite", "tis"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv", "nlme"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list=ls(all=TRUE));gc(reset=TRUE);par(mfrow=c(1,1))
contributors()
gc()
gui.classify()
require(stylo)
gui.classify()
gui.oppose()
1906561661/log(901)
convert_to_chardate <- function(arrive_int) {
char_date <- format(reference_time + arrive_int * 60, format = '%Y %m %d %H %M', tz = 'UTC')
return(char_date)
}
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
convert_to_chardate(280232261)
install.packages("Rmpi")
install.packages(c("cluster", "KernSmooth", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
sourceCpp("R code/c_Functions.cpp")
library(Rcpp)
sourceCpp("R code/c_Functions.cpp")
ls()
sourceCpp("R code/c_Functions.cpp")
ls()
load('elf_900.RData')
load('data/toys.RData')
source('R code/Functions.R')
toys_dat <- data.frame(toys)
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
outcome_all <- matrix(0, nrow = 0, ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for (index_num in 1:2){
myToys <- data.matrix(toys_dat[index[[index_num]],])
if (nrow(myToys)==11109){
schedule <- xbest[-c(11110)]
}else if(nrow(myToys)==11110){
schedule <- xbest
}else if(nrow(myToys)==11111){
schedule <- xbest
schedule[11111] <- 11111
}else if(nrow(myToys)==11112){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
}else if(nrow(myToys)==11113){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
schedule[11113] <- 11113
}
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all_2, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf(myToys, myelves, schedule))
}
load('elf_900.RData')
index
load('data/900_Folds.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
outcome_all <- matrix(0, nrow = 0, ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for (index_num in 1:2){
myToys <- data.matrix(toys_dat[index[[index_num]],])
if (nrow(myToys)==11109){
schedule <- xbest[-c(11110)]
}else if(nrow(myToys)==11110){
schedule <- xbest
}else if(nrow(myToys)==11111){
schedule <- xbest
schedule[11111] <- 11111
}else if(nrow(myToys)==11112){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
}else if(nrow(myToys)==11113){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
schedule[11113] <- 11113
}
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all_2, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf(myToys, myelves, schedule))
}
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule,]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- myelves[, 'elf_id']
c_elf_start_time <- myelves[, 'next_available_time']
c_elf_rating <- myelves[, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[, 'next_available_time'] <- updateNextAvailableMinute(c_elf_start_time, work_duration)
myelves[, 'current_rating'] <- updateProductivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
if(current_toy %% 20000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return((outcomes[which.max(outcomes[,3]),3]+outcomes[which.max(outcomes[,3]), 4])*log(901))
}
### Submit ###
solution_Elf_submit <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule,]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- myelves[, 'elf_id']
c_elf_start_time <- myelves[, 'next_available_time']
c_elf_rating <- myelves[, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- updateNextAvailableMinute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- updateProductivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return(outcomes)
}
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
outcome_all <- matrix(0, nrow = 0, ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for (index_num in 1:2){
myToys <- data.matrix(toys_dat[index[[index_num]],])
if (nrow(myToys)==11109){
schedule <- xbest[-c(11110)]
}else if(nrow(myToys)==11110){
schedule <- xbest
}else if(nrow(myToys)==11111){
schedule <- xbest
schedule[11111] <- 11111
}else if(nrow(myToys)==11112){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
}else if(nrow(myToys)==11113){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
schedule[11113] <- 11113
}
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all_2, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf(myToys, myelves, schedule))
}
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
outcome_all <- matrix(0, nrow = 0, ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for (index_num in 1:2){
myToys <- data.matrix(toys_dat[index[[index_num]],])
if (nrow(myToys)==11109){
schedule <- xbest[-c(11110)]
}else if(nrow(myToys)==11110){
schedule <- xbest
}else if(nrow(myToys)==11111){
schedule <- xbest
schedule[11111] <- 11111
}else if(nrow(myToys)==11112){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
}else if(nrow(myToys)==11113){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
schedule[11113] <- 11113
}
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf(myToys, myelves, schedule))
}
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
outcome_all <- matrix(0, nrow = 0, ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for (index_num in 1:900){
myToys <- data.matrix(toys_dat[index[[index_num]],])
if (nrow(myToys)==11109){
schedule <- xbest[-c(11110)]
}else if(nrow(myToys)==11110){
schedule <- xbest
}else if(nrow(myToys)==11111){
schedule <- xbest
schedule[11111] <- 11111
}else if(nrow(myToys)==11112){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
}else if(nrow(myToys)==11113){
schedule <- xbest
schedule[11111] <- 11111
schedule[11112] <- 11112
schedule[11113] <- 11113
}
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf(myToys, myelves, schedule))
}
dim(outcome_all)
head(outcome_all)
submissions_output <- data.frame(ToyId = as.integer(outcome_all[,1]),
ElfId = as.integer(outcome_all[,2]),
StartTime = convert_to_chardate(outcome_all[,3]),
Duration = as.integer(outcome_all[,4]), stringsAsFactors = FALSE)
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[which.max(outcome_all[,3]), 4])*log(901)
