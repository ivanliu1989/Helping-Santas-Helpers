gc()
gc()
library(doMC)
registerDoMC(cores = 1)
gc()
registerDoMC(cores = NULL)
install.packages(c("AICcmodavg", "deSolve", "Ecfun", "evtree", "highr", "knitr", "mboost", "mime", "minqa", "pcaPP", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "rjags", "rjson", "rmarkdown", "RSQLite", "tis"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv", "nlme"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list=ls(all=TRUE));gc(reset=TRUE);par(mfrow=c(1,1))
contributors()
gc()
gui.classify()
require(stylo)
gui.classify()
gui.oppose()
1906561661/log(901)
convert_to_chardate <- function(arrive_int) {
char_date <- format(reference_time + arrive_int * 60, format = '%Y %m %d %H %M', tz = 'UTC')
return(char_date)
}
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
convert_to_chardate(280232261)
install.packages("Rmpi")
install.packages(c("cluster", "KernSmooth", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
require(Rcpp)
cppFunction('int search(char *array, const int D1, const int D2)
　　{
　　　　strncmp(array + x * D2, "xx", 2);
　　}')
cppFunction('int search(char *array, const int D1, const int D2){strncmp(array + x * D2, "xx", 2);}')
cppFunction('int search(char *array, const int D1, const int D2){strncmp(array + D2, "xx", 2);}')
cppFunction('int search(char *array, const int D1, const int D2){strncmp(array + D2, "xx", 2);}')
cppFunction('int search(char *array, const int D1, const int D2){
return array[D1][D2];
}')
cppFunction('int search(char array[][D2]){
return array[][D2];
}')
cppFunction('int search(char array[][3]){
return array[][3];
}')
cppFunction('int search(char array[][3]){
return array[3];
}')
cppFunction('int search(char array[][3]){
return array[1][3];
}')
cppFunction('int search(char (*array)[3]){
return array[1][3];
}')
cppFunction('int search(char (*array)[3]){
return array[1][1];
}')
install.packages("mcga")
f <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- updateNextAvailableMinute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- updateProductivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
if(current_toy %% 2000000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return((outcomes[which.max(outcomes[,3]),3]+outcomes[which.max(outcomes[,3]), 4])*log(901))
}
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
source('R code/c_Functions.r')
load('data/toys.RData')
load('R_results/submit_1866324812.RData')
set.seed(888)
myToys <- toys; rm(toys)
schedule <- xbest ## last optimal solution xbest(toyID, elfID)
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
m <- mcga(popsize=200, chsize=5, minval=0.0, maxval=999999,
maxiter=2500, crossprob=1.0, mutateprob=0.01, evalFunc=f)
library(mcga)
m <- mcga(popsize=200, chsize=5, minval=0.0, maxval=999999,
maxiter=10, crossprob=1.0, mutateprob=0.01, evalFunc=f)
f <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- updateNextAvailableMinute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- updateProductivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
if(current_toy %% 2000000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return((outcomes[which.max(outcomes[,3]),3]+outcomes[which.max(outcomes[,3]), 4])*log(901))
}
m <- mcga(popsize=200, chsize=5, minval=0.0, maxval=999999,
maxiter=10, crossprob=1.0, mutateprob=0.01, evalFunc=f)
f(myToys, myelves, schedule)
