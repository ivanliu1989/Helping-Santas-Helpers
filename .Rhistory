gc()
gc()
library(doMC)
registerDoMC(cores = 1)
gc()
registerDoMC(cores = NULL)
install.packages(c("AICcmodavg", "deSolve", "Ecfun", "evtree", "highr", "knitr", "mboost", "mime", "minqa", "pcaPP", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "rjags", "rjson", "rmarkdown", "RSQLite", "tis"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv", "nlme"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list=ls(all=TRUE));gc(reset=TRUE);par(mfrow=c(1,1))
contributors()
gc()
gui.classify()
require(stylo)
gui.classify()
gui.oppose()
1906561661/log(901)
convert_to_chardate <- function(arrive_int) {
char_date <- format(reference_time + arrive_int * 60, format = '%Y %m %d %H %M', tz = 'UTC')
return(char_date)
}
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
convert_to_chardate(280232261)
gc(); rm(list=ls())
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
source('Functions.R')
source('R code/Functions.R')
ls()
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
load('data/toys_classified.RData')
head(toys)
-1440*log(4a)/(log(1.02)+log(0.9))
-1440*log(4*4)/(log(1.02)+log(0.9))
load('data/toys_classified.RData')
head(toys)
toys[which(toys[,'Duration']>=toy_break4),'Size'] <- 5 # 19.3%
toys[which(toys[,'Duration']<toy_break4),'Size'] <- 4
toys[which(toys[,'Duration']<toy_break3),'Size'] <- 3
toys[which(toys[,'Duration']<toy_break2),'Size'] <- 2
toys[which(toys[,'Duration']<toy_break1),'Size'] <- 1
toy_break1 <- 2.5*60; toy_break2 <- 10*60; toy_break3 <- 40*60, toy_break4<- 48*60
toy_break1 <- 2.5*60; toy_break2 <- 10*60; toy_break3 <- 40*60; toy_break4<- 48*60
toys[which(toys[,'Duration']>=toy_break4),'Size'] <- 5 # 19.3%
toys[which(toys[,'Duration']<toy_break4),'Size'] <- 4
toys[which(toys[,'Duration']<toy_break3),'Size'] <- 3
toys[which(toys[,'Duration']<toy_break2),'Size'] <- 2
toys[which(toys[,'Duration']<toy_break1),'Size'] <- 1
table(toys[,'Size'])
a <- table(toys[,'Size'])
a[1]/sum(a)
sum(a)
a[2]/sum(a)
a[3]/sum(a)
a[4]/sum(a)
a[5]/sum(a)
head(toys)
head( toys[order(toys[,'Size'], toys[,'Arrival_time']),])
tail( toys[order(toys[,'Size'], toys[,'Arrival_time']),])
toys <- transform(toys, exhaustion <- 0)
head(toys)
toys <- transform(toys[,'Exhaustion'] <- 0)
head(toys)
load('data/toys_classified.RData')
toys <- data.matrix(transform(toys, Exhaustion = 0))
head(toys)
toys[which(toys[,'Duration']>=toy_break4),'Exhaustion'] <- 1
toys[which(toys[,'Duration']>=toy_break4),'Size'] <- 5 # 1969432 20% - overwork
toys[which(toys[,'Duration']<toy_break4),'Size'] <- 4 # 52036 0.5% - 48 hour
toys[which(toys[,'Duration']<toy_break3),'Size'] <- 3 # 366753 3.7% - 40 hour
toys[which(toys[,'Duration']<toy_break2),'Size'] <- 2 # 1202851 12% - 10 hour
toys[which(toys[,'Duration']<toy_break1),'Size'] <- 1 # 6408928 64% - 2.5 hour
toys[which(toys[,'Duration']>=toy_break4),'Exhaustion'] <- 1
toys[which(toys[,'Duration']<toy_break4),'Exhaustion'] <- 0
head(toys)
toys <- toys[order(toys[,'Exhaustion'], toys[,'Arrival_time']),]
head(toys)
tail(toys)
toy_break1 <- 2.5*60; toy_break2 <- 10*60; toy_break3 <- 40*60; toy_break4<- 48*60; exhaustion <- 208 * 60
toys[which(toys[,'Duration']>=exhaustion),'Exhaustion'] <- 1
toys[which(toys[,'Duration']<exhaustion),'Exhaustion'] <- 0
table(toys[,'Exhaustion'])
995590/10000000
toys <- toys[order(toys[,'Exhaustion'], toys[,'Arrival_time']),]
di <- 100
a <- 2
dt <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 exp(-di(10 log 1.02 + 14 log 0.9)/(a * 1440)-1)
dt <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di(10 log 1.02 + 14 log 0.9)/(a * 1440)-1)
dt <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di(10*log(1.02) + 14*log(0.9))/(a * 1440)-1)
di <- 100
dt <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di(10*log(1.02) + 14*log(0.9))/(a * 1440)-1)
a * (1.02^(10 * di / 24 * a))
(0.9^(14 * di / 24 * a))
exp(-di(10*log(1.02) + 14*log(0.9))/(a * 1440)-1)
dt <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1)
dt
dt <- 60 * (4*a -1) / (4 * log(1.02))
dt
da <- -1440*log(4*a)/(log(1.02)+log(0.9))
da
head(myelves)
head(toys)
elf_score <- function (a, di){
da <- -1440*log(4*a)/(log(1.02)+log(0.9))
if (di < 600 * a){
dt <- 0 # < 600 * a
}else if(di < da){
dt <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
}else{
dt <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
}
return(dt)
}
myelves[,'score'] <- elf_score(myelves[,'current_rating'], c_toy_duration)
c_toy_duration <- 100
myelves[,'score'] <- elf_score(myelves[,'current_rating'], c_toy_duration)
head(myelves[,'score'])
da <- -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9))
da
myelves[,'current_rating']
da
(log(1.02)+log(0.9))
sapply(myelves[,'current_rating'], elf_score)
sapply(myelves[,'current_rating'], function(x) elf_score(x, c_toy_duration))
c_toy_duration
c_toy_duration <- 10000
sapply(myelves[,'current_rating'], function(x) elf_score(x, c_toy_duration))
c_toy_duration <- 100001234
sapply(myelves[,'current_rating'], function(x) elf_score(x, c_toy_duration))
c_toy_duration <- 100001
sapply(myelves[,'current_rating'], function(x) elf_score(x, c_toy_duration))
myelves[,'score'] <- sapply(myelves[,'current_rating'], function(x) elf_score(x, c_toy_duration))
head(myelves)
head(myelves)
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
assigned_elf
gc(); rm(list=ls())
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
load('data/toys_classified.RData')
toy_break1 <- 2.5*60; toy_break2 <- 10*60; toy_break3 <- 40*60; toy_break4<- 48*60; exhaustion <- 208*60
toys <- data.matrix(transform(toys, Exhaustion = 0))
toys[which(toys[,'Duration']>=toy_break4),'Size'] <- 5 # 1969432 20% - overwork
toys[which(toys[,'Duration']<toy_break4),'Size'] <- 4 # 52036 0.5% - 48 hour
toys[which(toys[,'Duration']<toy_break3),'Size'] <- 3 # 366753 3.7% - 40 hour
toys[which(toys[,'Duration']<toy_break2),'Size'] <- 2 # 1202851 12% - 10 hour
toys[which(toys[,'Duration']<toy_break1),'Size'] <- 1 # 6408928 64% - 2.5 hour
toys[which(toys[,'Duration']>=exhaustion),'Exhaustion'] <- 1 # 995590 10% less than 208 hours
toys[which(toys[,'Duration']<exhaustion),'Exhaustion'] <- 0 # 9004410 90% 208 hour
toys <- toys[order(toys[,'Exhaustion'], toys[,'Arrival_time']),]
#########################
### Schedule Strategy ###
#########################
# a: current_rating
# dt: required training time to restore
# di: duration
elf_score <- function (a, di){
da <- -1440*log(4*a)/(log(1.02)+log(0.9))
if (di < 600 * a){
dt <- 0 # < 600 * a
}else if(di < da){
dt <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
}else{
dt <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
}
return(dt)
}
assign_elf <- function(myelves, c_toy_size, c_toy_duration) {
myelves[,'score'] <- sapply(myelves[,'current_rating'], function(x) elf_score(x, c_toy_duration))
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
#################
### Main Loop ###
#################
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_toy_size <- myToys[current_toy,'Size']
myelves[which(myelves[,'current_rating']<overwork_elf),'score'] <- 2
myelves[which(myelves[,'current_rating']<=train_elf),'score'] <- 1
myelves[which(myelves[,'current_rating']>=overwork_elf),'score'] <- 3
next_elf <- assign_elf(myelves, c_toy_size)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
submissions <- solution_sortedElf(toys[1:10000,], myelves)
elf_score <- function (a, di){
da <- -1440*log(4*a)/(log(1.02)+log(0.9))
if (di < 600 * a){
dt <- 0 # < 600 * a
}else if(di < da){
dt <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
}else{
dt <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
}
return(dt)
}
assign_elf <- function(myelves, c_toy_duration) {
myelves[,'score'] <- sapply(myelves[,'current_rating'], function(x) elf_score(x, c_toy_duration))
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
#################
### Main Loop ###
#################
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(myelves, c_toy_duration)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
submissions <- solution_sortedElf(toys[1:10000,], myelves)
submissions
head(submissions)
submissions <- solution_sortedElf(toys, myelves)
c_toy_duration
c_toy_duration <- 1000
myelves
system.time(next_elf <- assign_elf(myelves, c_toy_duration))
system.time(next_elf <- assign_elf(myelves, c_toy_duration))*10000000
70000/3600
require(data.table)
myelves <- data.table(myelves)
head(myel)
head(myelves)
class(myelves)
head(myelves)
myelves[,score:=elf_score(current_rating, c_toy_duration)]
head(myelves)
system.time(myelves[,score:=elf_score(current_rating, c_toy_duration)])
system.time(myelves[,score:=elf_score(current_rating, 2)])
system.time(myelves[,.score:=elf_score(current_rating, c_toy_duration)])
myelves
myelves <- create_elves(NUM_ELVES)
head(myelves)
myelves <- data.matrix(transform(myelves, index = 0))
head(myelves)
c_toy_duration < myelves[,'current_rating']*600
myelves[,'current_rating']*600
myelves[1,'current_rating'] <- 4
myelves[,'current_rating']
c_toy_duration < myelves[,'current_rating']*600
myelves[c_toy_duration < myelves[,'current_rating']*600 ,'index']
myelves[which(c_toy_duration < myelves[,'current_rating']*600) ,'index']
myelves[1:5,'current_rating'] <- 4
myelves[c_toy_duration < myelves[,'current_rating']*600 ,'index']
head(myelves)
-1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9))
c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9))
myelves[,'score'] <- 60 * (4*myelves[,'current_rating'] -1) / (4 * log(1.02)) # >=da
myelves[,'score']
myelves[,'score']
a <- myelves[,'current_rating']
di <- c_toy_duration
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[,'score']
myelves[c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9)) ,'score'] <-
a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[c_toy_duration < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
myelves
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[,'score']
myelves[c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9)) ,'score'] <-
a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[,'score']
c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9))
c_toy_duration
c_toy_duration<- 5000
c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9))
c_toy_duration<- 50000
c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9))
c_toy_duration<- 20000
c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9))
c_toy_duration<- 30000
c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9))
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[,'score']
myelves[c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9)) ,'score'] <-
a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
a <- myelves[,'current_rating']
di <- c_toy_duration
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9)) ,'score'] <-
a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[c_toy_duration < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9)) ,'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[c_toy_duration < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
a <- myelves[,'current_rating']
a
a <- myelves[,'score']
a
di <- 100
myelves[c_toy_duration < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
a <- myelves[,'score']
a
myelves[c_toy_duration < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
c_toy_duration
assign_elf <- function(myelves, di) {
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*myelves[,'current_rating'])/(log(1.02)+log(0.9)) ,'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[di < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
myelves
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves[1:10,]
myelves[1:10,2]<-4
myelves[1:10,]
myelves
c_toy_duration
next_elf <- assign_elf(myelves, c_toy_duration)
-1440*log(4*a)/(log(1.02)+log(0.9))
di
di < -1440*log(4*a)/(log(1.02)+log(0.9))
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score']
a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1)
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
assign_elf <- function(myelves, di) {
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[di < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
next_elf <- assign_elf(myelves, c_toy_duration)
di <- 50000
a <- myelves[,'current_rating']
a
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[,'score']
myelves[di < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
myelves
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
assigned_elf
assign_elf <- function(myelves, di) {
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[di < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
next_elf <- assign_elf(myelves, c_toy_duration)
myelves
c_toy_duration
assign_elf(myelves, c_toy_duration)
di <- c_toy_duration
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[di < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
next_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
di <- c_toy_duration
di
a
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[di < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[di < (-1440*log(4*a)/(log(1.02)+log(0.9))),'score'] <- a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
myelves[di < (-1440*log(4*a)/(log(1.02)+log(0.9))),'score']
a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
a * (1.02^(10 * di / 24 * a)) * (0.9^(14 * di / 24 * a)) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a * 1440)-1) # [a * 600, da)
a * (1.02^(10 * di / 24 * a))
di
a
10 * di / 24 * a
1.02^(10 * di / 24 * a)
a
a[di < -1440*log(4*a)/(log(1.02)+log(0.9))]
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score']
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
assign_elf <- function(myelves, di) {
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves[di < myelves[,'current_rating'] * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
next_elf <- assign_elf(myelves, c_toy_duration)
next_elf
system.time(next_elf <- assign_elf(myelves, c_toy_duration))
