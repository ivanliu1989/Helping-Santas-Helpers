gc()
gc()
library(doMC)
registerDoMC(cores = 1)
gc()
registerDoMC(cores = NULL)
install.packages(c("AICcmodavg", "deSolve", "Ecfun", "evtree", "highr", "knitr", "mboost", "mime", "minqa", "pcaPP", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "rjags", "rjson", "rmarkdown", "RSQLite", "tis"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv", "nlme"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list=ls(all=TRUE));gc(reset=TRUE);par(mfrow=c(1,1))
contributors()
gc()
gui.classify()
require(stylo)
gui.classify()
gui.oppose()
1906561661/log(901)
convert_to_chardate <- function(arrive_int) {
char_date <- format(reference_time + arrive_int * 60, format = '%Y %m %d %H %M', tz = 'UTC')
return(char_date)
}
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
convert_to_chardate(280232261)
install.packages("Rmpi")
install.packages(c("cluster", "KernSmooth", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
a <- c(1:100)
a
gmb <- combn(a)
gmb <- combn(a,2)
gmb
gmb <- combn(a,100)
gmb
dim(gmb)
a <- c(1:100)
a
gmb <- combn(a,100)
dim(gmb)
gmb <- combn(a,1)
dim(gmb)
combn(10, 3)
gmb <- combn(10000, 10000)
dim(gmb)
gmb
gmb <- combn(a,2)
gmb
a <- c(1:100)
a
b<-rep(a,10)
b
b<-matrix(rep(a,10), nrow=10)
b
b<-matrix(rep(a,10), nrow=10, byrow = T)
b
b<-matrix(rep(a,10), nrow=10, byrow = F)
b
b<-matrix(rep(a,10), nrow=10, byrow = T)
b
nrow(b)
sample(nrow(b))
rand <- sample(nrow(b))
rand
rand <- sample(ncol(b))
rand
table(rand)
b[rand,]
b[,rand]
rand <- sample(ncol(b))
rand <- sample(1:100)
rand
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
load('data/toys.RData')
require(caret)
set.seed(8888)
toys_dat <- data.frame(toys)
index <- createDataPartition(toys_dat$Duration, p = 1/900, list = F)
myToys <- data.matrix(toys_dat[index,])
rand <- sample(1:nrow(myToys))
rand
rand
for (i in 1:1000){
rand <- rbind(rand, sample(1:nrow(myToys)))
}
dim(rand)
system.time(for (i in 1:1000){
rand <- rbind(rand, sample(1:nrow(myToys)))
})
dim(rand)
rand <- data.matrix(rand)
dim(rand)
head(rand)
rand[1:5,1:5]
rand[1,]
solution_Elf <- function(myToys, myelves, schedule){
# cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule,]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- myelves[, 'elf_id']
c_elf_start_time <- myelves[, 'next_available_time']
c_elf_rating <- myelves[, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
#         if(current_toy %% 10000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
#                                            format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
# cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes[nrow(outcomes), 3]+outcomes[nrow(outcomes), 4])
}
myelves
schedule <- c(1:nrow(myToys))
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
fx0 <- solution_Elf(myToys, myelves, x0)
fx0 <- solution_Elf(myToys, myelves, schedule)
fx0
fx0[1] <- solution_Elf(myToys, myelves, schedule)
fx0
fx0[2] <- solution_Elf(myToys, myelves, schedule)
fx0[2]
fx0
for (i in 1:100){
fx0[i] <- solution_Elf(myToys, myelves, rand[i,])
}
fx0
length(fx0)
range(fx0)
convert_to_chardate(271896025)
for (i in 101:200){
fx0[i] <- solution_Elf(myToys, myelves, rand[i,])
}
fx0
range(fx0)
range(which(fx0!=NA))
which(fx0!=NA)
fx0
fx0[!NA]
fx0[NA]
fx0
fx0[!(NA)]
fx0==NA
which(fx0==NA)
which(fx0=NA)
which(fx0==NaN)
fx0
fx0[1]
fx0[101:200]
range(fx0[101:200])
range(fx0[1:200])
range(fx0[99:200])
range(fx0[101:200])
for (i in 1:700){
fx0[i] <- solution_Elf(myToys, myelves, rand[i,])
}
fx0
range(fx0)
rand
dim(rand)
rand[,'result'] <- solution_Elf(myToys, myelves, rand[,1:11113])
rand[1,1:11113]
myelves
myToys
head(myToys)
nrow(myToys)
dim(rand[,1:11113])
require(data.table)
rand <- data.table(rand)
rand
head(rand)
rand[1,1]
dim(rand)
rand[100,]
rand[1,]
rand <- data.matrix(rand)
head(rand)
rand[1,1]
rand[1,1:100]
rand[,'result'] <- solution_Elf(myToys, myelves, rand[,1:11113])
rand[,'result'] <- solution_Elf(myToys, myelves, rand[1,1:11113])
rand[1,'result'] <- solution_Elf(myToys, myelves, rand[1,1:11113])
dim(rand)
a <- solution_Elf(myToys, myelves, rand)
rand[1,]
a <- solution_Elf(myToys, myelves, rand[1,])
a
a <- solution_Elf(myToys, myelves, rand[1:5,])
a[1:5] <- solution_Elf(myToys, myelves, rand[1:5,])
a[1:5]
solution_Elf(myToys, myelves, rand[1:5,])
list <- 1
list
list <- list(list ,2)
list
list <- list(list ,2)
list
list <- 1
list <- c(list,1)
list
list <- c(1,21,123,123)
list <- c(list,c(12,213123))
list
rand
rm(rand)
set.seed(8888)
for (i in 1:1000){
rand <- rbind(rand, sample(1:nrow(myToys)))
}
rand <- sample(1:nrow(myToys))
for (i in 1:1000){
rand <- rbind(rand, sample(1:nrow(myToys)))
}
rand
rand <- data.matrix(rand)
dim(rand)
for (i in 1:nrow(rand)){
fx0[i] <- solution_Elf(myToys, myelves, rand[i,])
}
range(fx0)
convert_to_chardate(271727912)
271727912*log(901)
