cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
schedule <- c(1:11113)#x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
for (s in S){
Np <- (1+s)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
x1 <- xbest
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1[rep_range] <- sample(x1[rep_range])
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n +++++ Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
bk <- 0
}else{
cat(paste('\n ----- Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
}else{
bk <- bk + 1
}
if (bk > Tolerance) break
}
}
}
x_all[[n]] <- xbest
f_all[n] <- fbest
cat(paste('\n * Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
if(fbest < 1700000000) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData')
#if(index_num %% 50 == 0) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData') #==========>> 1:225 | 226:450 | 451:675 | 676:900
}
candidate <- which(toy_length == 11113)
toy_length <-c()
for (i in 1:900){
toy_length <- c(toy_length, length(index[[i]]))
}
table(toy_length)
candidate <- which(toy_length == 11113)
for (index_num in index_range){
Tolerance <- 2500 #runif(1,min = 10,max = 10000)
n<-candidate[index_num]
now <- Sys.time()
set.seed(index_num)
cat(paste('\n\nRound :',index_num, Tolerance))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
schedule <- c(1:11113)#x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
for (s in S){
Np <- (1+s)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
x1 <- xbest
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1[rep_range] <- sample(x1[rep_range])
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n +++++ Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
bk <- 0
}else{
cat(paste('\n ----- Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
}else{
bk <- bk + 1
}
if (bk > Tolerance) break
}
}
}
x_all[[n]] <- xbest
f_all[n] <- fbest
cat(paste('\n * Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
if(fbest < 1700000000) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData')
#if(index_num %% 50 == 0) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData') #==========>> 1:225 | 226:450 | 451:675 | 676:900
}
load('Latest Stable Models/heuristic/single_optimization.RData')
load('optimization_results/single_optimization.RData')
index_range <- 11:41
toys_dat <- data.frame(toys)
C <- 5
S <- c(1,10,30,100,300,1000,3000,6000,9000)
NUM_ELVES <- 1
for (index_num in index_range){
Tolerance <- 2500 #runif(1,min = 10,max = 10000)
n<-candidate[index_num]
now <- Sys.time()
set.seed(index_num)
cat(paste('\n\nRound :',index_num, Tolerance))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
schedule <- c(1:11113)#x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
for (s in S){
Np <- (1+s)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
x1 <- xbest
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1[rep_range] <- sample(x1[rep_range])
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n +++++ Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
bk <- 0
}else{
cat(paste('\n ----- Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
}else{
bk <- bk + 1
}
if (bk > Tolerance) break
}
}
}
x_all[[n]] <- xbest
f_all[n] <- fbest
cat(paste('\n * Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
if(fbest < 1700000000) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData')
#if(index_num %% 50 == 0) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData') #==========>> 1:225 | 226:450 | 451:675 | 676:900
}
x_all[[n]] <- xbest
f_all[n] <- fbest
save(x_all,f_all, file='optimization_results/single_optimization.RData')
f_all
candidate[]
f_all[candidate]
save(x_all,f_all, file='optimization_results/single_optimization.RData')
index_range <- 1:888
toys_dat <- data.frame(toys)
C <- 6
S <- c(1,10,30,100,300,1000,3000,6000,9000)
NUM_ELVES <- 1
for (index_num in index_range){
Tolerance <- runif(1,min = 10,max = 10000)
n<-candidate[20]
now <- Sys.time()
set.seed(index_num)
cat(paste('\n\nRound :',index_num, Tolerance))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
schedule <- c(1:11113)#x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
for (s in S){
Np <- (1+s)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
x1 <- xbest
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1[rep_range] <- sample(x1[rep_range])
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n +++++ Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
bk <- 0
}else{
cat(paste('\n ----- Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
}else{
bk <- bk + 1
}
if (bk > Tolerance) break
}
}
}
x_all[[n]] <- xbest
f_all[n] <- fbest
cat(paste('\n * Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
#if(fbest < 1700000000) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData')
#if(index_num %% 50 == 0) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData') #==========>> 1:225 | 226:450 | 451:675 | 676:900
}
index_range <- 1:888
toys_dat <- data.frame(toys)
C <- 6
S <- c(1,10,30,100,300,1000,3000,6000,9000)
NUM_ELVES <- 1
for (index_num in index_range){
Tolerance <- runif(1,min = 10,max = 10000)
n<-candidate[20]
now <- Sys.time()
set.seed(index_num)
cat(paste('\n\nRound :',index_num, Tolerance))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
for (s in S){
Np <- (1+s)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
x1 <- xbest
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1[rep_range] <- sample(x1[rep_range])
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n +++++ Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
bk <- 0
}else{
cat(paste('\n ----- Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
}else{
bk <- bk + 1
}
if (bk > Tolerance) break
}
}
}
x_all[[n]] <- xbest
f_all[n] <- fbest
cat(paste('\n * Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
#if(fbest < 1700000000) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData')
#if(index_num %% 50 == 0) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData') #==========>> 1:225 | 226:450 | 451:675 | 676:900
}
x_all[[n]] <- xbest
f_all[n] <- fbest
save(x_all,f_all, file='optimization_results/single_optimization.RData')
index_range <- 1:888
toys_dat <- data.frame(toys)
C <- 6
S <- c(1,10,30,100,300,1000,2000,3000,4500,6000,7500,9000,10000)
NUM_ELVES <- 1
for (index_num in index_range){
#Tolerance <- runif(1,min = 2000,max = 10000)
n<-candidate[20]
now <- Sys.time()
set.seed(index_num)
cat(paste('\n\nRound :',index_num, Tolerance))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
for (s in S){
Np <- (1+s)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
x1 <- xbest
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1[rep_range] <- sample(x1[rep_range])
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n +++++ Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
bk <- 0
}else{
cat(paste('\n ----- Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
#}else{
#bk <- bk + 1
}
#if (bk > Tolerance) break
}
}
}
x_all[[n]] <- xbest
f_all[n] <- fbest
cat(paste('\n * Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
#if(fbest < 1700000000) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData')
#if(index_num %% 50 == 0) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData') #==========>> 1:225 | 226:450 | 451:675 | 676:900
}
x_all[[n]] <- xbest
f_all[n] <- fbest
save(x_all,f_all, file='optimization_results/single_optimization.RData')
table(toy_length)
index_range <- 1:888
toys_dat <- data.frame(toys)
C <- 6
S <- c(1,10,30,100,300,1000,2000,3000,4500,6000,7500,9000,10000)
NUM_ELVES <- 1
for (index_num in index_range){
#Tolerance <- runif(1,min = 2000,max = 10000)
n<-candidate[20]
now <- Sys.time()
set.seed(index_num)
cat(paste('\n\nRound :',index_num, Tolerance))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
for (s in S){
Np <- (1+s)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
x1 <- xbest
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1[rep_range] <- sample(x1[rep_range])
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n +++++ Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
bk <- 0
}else{
cat(paste('\n ----- Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
#}else{
#bk <- bk + 1
}
#if (bk > Tolerance) break
}
}
}
x_all[[n]] <- xbest
f_all[n] <- fbest
cat(paste('\n * Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
#if(fbest < 1700000000) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData')
#if(index_num %% 50 == 0) save(x_all,f_all, file='/Users/ivan/Google Drive/Simulated_Annealing_676_900_temp.RData') #==========>> 1:225 | 226:450 | 451:675 | 676:900
}
x_all[[n]] <- xbest
f_all[n] <- fbest
save(x_all,f_all, file='optimization_results/single_optimization.RData')
which(x0==11113)
which(x0==11112)
for(n in 1:900){
myToys <- data.matrix(toys_dat[index[[n]],])
if(nrow(myToys)==11109){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
x0 <- x0[-which(x0==11112)]
x0 <- x0[-which(x0==11111)]
x0 <- x0[-which(x0==11110)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else if(nrow(myToys)==11110){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
x0 <- x0[-which(x0==11112)]
x0 <- x0[-which(x0==11111)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else if(nrow(myToys)==11111){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
x0 <- x0[-which(x0==11112)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else if(nrow(myToys)==11112){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else{
f_all[n] <- solution_Elf_c(myToys, myelves, x_all[[398]])
}
}
for(n in 1:900){
myToys <- data.matrix(toys_dat[index[[n]],])
if(nrow(myToys)==11109){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
x0 <- x0[-which(x0==11112)]
x0 <- x0[-which(x0==11111)]
x0 <- x0[-which(x0==11110)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else if(nrow(myToys)==11110){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
x0 <- x0[-which(x0==11112)]
x0 <- x0[-which(x0==11111)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else if(nrow(myToys)==11111){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
x0 <- x0[-which(x0==11112)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else if(nrow(myToys)==11112){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else{
f_all[n] <- solution_Elf_c(myToys, myelves, x_all[[398]])
}
cat('\n',n);
}
range(f_all)
for(n in 1:900){
myToys <- data.matrix(toys_dat[index[[n]],])
if(nrow(myToys)==11109){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
x0 <- x0[-which(x0==11112)]
x0 <- x0[-which(x0==11111)]
x0 <- x0[-which(x0==11110)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else if(nrow(myToys)==11110){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
x0 <- x0[-which(x0==11112)]
x0 <- x0[-which(x0==11111)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else if(nrow(myToys)==11111){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
x0 <- x0[-which(x0==11112)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else if(nrow(myToys)==11112){
x0 <- x_all[[398]]
x0 <- x0[-which(x0==11113)]
f_all[n] <- solution_Elf_c(myToys, myelves, x0)
}else{
f_all[n] <- solution_Elf_c(myToys, myelves, x_all[[398]])
}
cat('\n',n, ' ', f_all[n]);
}
