install.packages("installr");
library(installr)
updateR()
85+890+15+10
95/1000
install.packages(c("arules", "arulesViz", "Boruta", "Ecfun", "gender", "GGally", "gplots", "jsonlite", "multcomp", "plotmo", "prodlim", "RColorBrewer", "RcppArmadillo", "RCurl", "reshape2", "rFerns", "ROAuth", "rpart.plot", "rrcov", "seriation", "shiny", "VGAM"))
convert_to_minute <- function(arrival) {
arrive_time <- as.POSIXct(arrival, '%Y %m %d %H %M', tz = 'UTC')
age <- as.integer(difftime(arrive_time, reference_time, units = 'mins', tz = 'UTC'))
return(age)
}
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
convert_to_minute('2532 01 22 09 07')
convert_to_chardate <- function(arrive_int) {
char_date <- format(reference_time + arrive_int * 60, format = '%Y %m %d %H %M', tz = 'UTC')
return(char_date)
}
convert_to_chardate(9000000)
convert_to_chardate(17500000)
convert_to_chardate(175000000)
10000/24
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
x_comb <- list()
load('optimization_results/simulated_annealing_1_300.RData')
for (i in 1:300){
f_comb[i] <- f_all[i]
x_comb[[i]] <- x_all[[i]]
}
f_comb <- c()
load('optimization_results/simulated_annealing_1_300.RData')
for (i in 1:300){
f_comb[i] <- f_all[i]
x_comb[[i]] <- x_all[[i]]
}
load('simulated_annealing_301_600.RData')
for (i in 301:600){
f_comb[i] <- f_all[i]
x_comb[[i]] <- x_all[[i]]
}
load('optimization_results/simulated_annealing_301_600.RData')
for (i in 301:600){
f_comb[i] <- f_all[i]
x_comb[[i]] <- x_all[[i]]
}
load('optimization_results/simulated_annealing_601_900.RData')
for (i in 601:900){
f_comb[i] <- f_all[i]
x_comb[[i]] <- x_all[[i]]
}
range(f_comb)
save(x_comb,f_comb, file='optimization_results/Simulated_Annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_comb[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_comb[index_num])
}
myelves <- create_elves(NUM_ELVES)
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_comb[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_comb[index_num])
}
toys_dat <- data.frame(toys)
load('data/900_Folds.RData')
load('data/toys.RData')
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_comb[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_comb[index_num])
}
submissions_output <- data.frame(ToyId = as.integer(outcome_all[,1]),
ElfId = as.integer(outcome_all[,2]),
StartTime = convert_to_chardate(outcome_all[,3]),
Duration = as.integer(outcome_all[,4]), stringsAsFactors = FALSE)
dim(submissions_output)
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[which.max(outcome_all[,3]), 4])*log(901)
write.csv(submissions_output, 'toys_submission_SA_test.csv', row.names = FALSE)
