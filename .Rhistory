for (index_num in 1:1){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
#myToys <- myToys[order(x_all[[index_num]]),] # ??
#schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves))#,'fbest:',f_all[index_num])
}
myelves
tail(outcome_all)
tail(myToys)
gc(); rm(list=ls())
load('data/toys_regulated.RData'); load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:1){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
#myToys <- myToys[order(x_all[[index_num]]),] # ??
#schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves))#,'fbest:',f_all[index_num])
}
# setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
setwd('H:/Machine_Learning/FICO/Helping-Santas-Helpers')
gc(); rm(list=ls()); source('R code/Functions.R');
load('data/toys_regulated.RData')
# load('data/toys.RData')
### break down toys dataset ###
toys <- data.matrix(toys)
toy_ex1 <- 5760; toy_ex2 <- 15480;
toy_remain <- 3080 # 2848
toy_retrain1 <- c(120:153); toy_retrain2 <- c(174:210); toy_retrain3 <- c(211:256);
toy_retrain4 <- c(257:312); toy_retrain5 <- c(313:381); toy_retrain6 <- c(382:464); toy_retrain7 <- c(465:566,30:34);
# toy_retrain1 <- c(150); toy_retrain2 <- c(183); toy_retrain3 <- c(223);
# toy_retrain4 <- c(272); toy_retrain5 <- c(331); toy_retrain6 <- c(404); toy_retrain7 <- c(492);
toy_train1 <- c(567:690,35:39); toy_train2 <- c(691:841,40:49); toy_train3 <- c(842:1025,50:59);
toy_train4 <- c(1026:1250,60:69); toy_train5 <- c(1251:1523,70:79); toy_train6 <- c(1524:1857,80:89); toy_train7 <- c(1858:2264,100:105);
toys <- data.matrix(transform(toys, Size = 0)) # trival
toys[which(toys[,'Duration']<=toy_remain),'Size'] <- 1 # remain
toys[which(toys[,'Duration']<1858),'Size'] <- 0 # trival
toys[which(toys[,'Duration']>toy_remain),'Size'] <- 2 # ex1
toys[which(toys[,'Duration']>=toy_ex2),'Size'] <- 3 # ex2
toys[which(toys[,'Duration']%in%toy_retrain1),'Size'] <- 4 # re1
toys[which(toys[,'Duration']%in%toy_retrain2),'Size'] <- 5 # re2
toys[which(toys[,'Duration']%in%toy_retrain3),'Size'] <- 6 # re3
toys[which(toys[,'Duration']%in%toy_retrain4),'Size'] <- 7 # re4
toys[which(toys[,'Duration']%in%toy_retrain5),'Size'] <- 8 # re5
toys[which(toys[,'Duration']%in%toy_retrain6),'Size'] <- 9 # re6
toys[which(toys[,'Duration']%in%toy_retrain7),'Size'] <- 10 # re7
toys[which(toys[,'Duration']%in%toy_train1),'Size'] <- 11 # tr1
toys[which(toys[,'Duration']%in%toy_train2),'Size'] <- 12 # tr2
toys[which(toys[,'Duration']%in%toy_train3),'Size'] <- 13 # tr3
toys[which(toys[,'Duration']%in%toy_train4),'Size'] <- 14 # tr4
toys[which(toys[,'Duration']%in%toy_train5),'Size'] <- 15 # tr5
toys[which(toys[,'Duration']%in%toy_train6),'Size'] <- 16 # tr6
toys[which(toys[,'Duration']%in%toy_train7),'Size'] <- 17 # tr7
#table(toys[,'Size'])
toys_0 <- toys[which(toys[,'Size']==0),]
toys_1 <- toys[which(toys[,'Size']==1),]
toys_2 <- toys[which(toys[,'Size']==2),]
toys_3 <- toys[which(toys[,'Size']==3),]
toys_4 <- toys[which(toys[,'Size']==4),]
toys_5 <- toys[which(toys[,'Size']==5),]
toys_6 <- toys[which(toys[,'Size']==6),]
toys_7 <- toys[which(toys[,'Size']==7),]
toys_8 <- toys[which(toys[,'Size']==8),]
toys_9 <- toys[which(toys[,'Size']==9),]
toys_10 <- toys[which(toys[,'Size']==10),]
toys_11 <- toys[which(toys[,'Size']==11),]
toys_12 <- toys[which(toys[,'Size']==12),]
toys_13 <- toys[which(toys[,'Size']==13),]
toys_14 <- toys[which(toys[,'Size']==14),]
toys_15 <- toys[which(toys[,'Size']==15),]
toys_16 <- toys[which(toys[,'Size']==16),]
toys_17 <- toys[which(toys[,'Size']==17),]
toys_0 <- toys_0[order(toys_0[,'Arrival_time']),]
toys_1 <- toys_1[order(-toys_1[,'Duration'],toys_1[,'Arrival_time']),]
toys_2 <- toys_2[order(toys_2[,'Arrival_time'],toys_2[,'Duration']),]
toys_3 <- toys_3[order(-toys_3[,'Duration'],toys_3[,'Arrival_time']),]
toys_4 <- toys_4[order(toys_4[,'Arrival_time'],-toys_4[,'Duration']),]
toys_5 <- toys_5[order(toys_5[,'Arrival_time'],-toys_5[,'Duration']),]
toys_6 <- toys_6[order(toys_6[,'Arrival_time'],-toys_6[,'Duration']),]
toys_7 <- toys_7[order(toys_7[,'Arrival_time'],-toys_7[,'Duration']),]
toys_8 <- toys_8[order(toys_8[,'Arrival_time'],-toys_8[,'Duration']),]
toys_9 <- toys_9[order(toys_9[,'Arrival_time'],-toys_9[,'Duration']),]
toys_10 <- toys_10[order(toys_10[,'Arrival_time'],-toys_10[,'Duration']),]
toys_11 <- toys_11[order(toys_11[,'Arrival_time'],-toys_11[,'Duration']),]
toys_12 <- toys_12[order(toys_12[,'Arrival_time'],-toys_12[,'Duration']),]
toys_13 <- toys_13[order(toys_13[,'Arrival_time'],-toys_13[,'Duration']),]
toys_14 <- toys_14[order(toys_14[,'Arrival_time'],-toys_14[,'Duration']),]
toys_15 <- toys_15[order(toys_15[,'Arrival_time'],-toys_15[,'Duration']),]
toys_16 <- toys_16[order(toys_16[,'Arrival_time'],-toys_16[,'Duration']),]
toys_17 <- toys_17[order(toys_17[,'Arrival_time'],-toys_17[,'Duration']),]
# 7days seperate
#setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
#gc(); rm(list=ls()); source('R code/Functions.R');
require(Rcpp)
sourceCpp('Latest Stable Models/greedy algorithm/main_greedy_ver2.1.cpp')
### Segmentation Elf ###
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves_rate <- myelves[,'current_rating']
### main loop ###
submissions <- solution_Elf(toys_0,toys_1,toys_2,toys_3,toys_4,toys_5,toys_6,toys_7,toys_8,
toys_9,toys_10,toys_11,toys_12,toys_13,toys_14,toys_15,toys_16,
toys_17,myelves,myelves_rate)
(submissions[which.max(submissions[,3]),3]+submissions[which.max(submissions[,3]), 4])*log(1+NUM_ELVES)
head(submissions)
submissions_output <- data.frame(ToyId = as.integer(submissions[,1]),
ElfId = as.integer(submissions[,2]),
StartTime = convert_to_chardate(submissions[,3]),
Duration = as.integer(submissions[,4]), stringsAsFactors = FALSE)
load('data/toys_regulated.RData'); load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:1){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
#myToys <- myToys[order(x_all[[index_num]]),] # ??
#schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves))#,'fbest:',f_all[index_num])
}
save(submissions_output, outcome_all, file='comparison_GA.RData')
gc(); rm(list=ls()); source('R code/Functions.R');
gc(); rm(list=ls())
load('comparison_GA.RData')
ls()
head(outcome_all)
head(submissions_output)
head(submissions_output[which(submissions_output[,2]==1)])
head(submissions_output[which(submissions_output[,2]==1),])
tail(submissions_output[which(submissions_output[,2]==1),])
tail(outcome_all)
convert_to_minute <- function(arrival) {
arrive_time <- as.POSIXct(arrival, '%Y %m %d %H %M', tz = 'UTC')
age <- as.integer(difftime(arrive_time, reference_time, units = 'mins', tz = 'UTC'))
return(age)
}
convert_to_chardate <- function(arrive_int) {
char_date <- format(reference_time + arrive_int * 60, format = '%Y %m %d %H %M', tz = 'UTC')
return(char_date)
}
convert_to_minute('2482 03 22 12 20')
######################
hours_per_day <- 10
day_start <- 9 * 60
day_end <- (9 + hours_per_day) * 60
minutes_in_24h <- 24 * 60
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
rating_increase <- 1.02
rating_decrease <- 0.90
convert_to_minute('2482 03 22 12 20')
246260900 + 61848
246322748 * log(901)
identical(submissions_output[,1], outcome_all[,1])
submissions_output[,1]-outcome_all[,1]
comp <- cbind(submissions_output[,1],outcome_all[,1])
head)submissions_output[,1]
head(submissions_output[,1])
head(submissions_output[,2])
head(submissions_output)
submissions_output_1 <- submissions_output[which(submissions_output[,2]==1),]
identical(submissions_output_1[,2], outcome_all[,1])
identical(submissions_output_1[,1], outcome_all[,1])
head(submissions_output_1)
head(submissions_output_1[,1])
head(outcome_all)
comp <- cbind(submissions_output_1[,1],outcome_all[,1])
head(comp)
head(comp,100)
comp[,1]-comp[,2]
sum(comp[,1]-comp[,2])
# setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
setwd('H:/Machine_Learning/FICO/Helping-Santas-Helpers')
gc(); rm(list=ls()); source('R code/Functions.R');
load('data/toys_regulated.RData')
# load('data/toys.RData')
### break down toys dataset ###
toys <- data.matrix(toys)
toy_ex1 <- 5760; toy_ex2 <- 15480;
toy_remain <- 3080 # 2848
toy_retrain1 <- c(120:153); toy_retrain2 <- c(174:210); toy_retrain3 <- c(211:256);
toy_retrain4 <- c(257:312); toy_retrain5 <- c(313:381); toy_retrain6 <- c(382:464); toy_retrain7 <- c(465:566,30:34);
# toy_retrain1 <- c(150); toy_retrain2 <- c(183); toy_retrain3 <- c(223);
# toy_retrain4 <- c(272); toy_retrain5 <- c(331); toy_retrain6 <- c(404); toy_retrain7 <- c(492);
toy_train1 <- c(567:690,35:39); toy_train2 <- c(691:841,40:49); toy_train3 <- c(842:1025,50:59);
toy_train4 <- c(1026:1250,60:69); toy_train5 <- c(1251:1523,70:79); toy_train6 <- c(1524:1857,80:89); toy_train7 <- c(1858:2264,100:105);
toys <- data.matrix(transform(toys, Size = 0)) # trival
toys[which(toys[,'Duration']<=toy_remain),'Size'] <- 1 # remain
toys[which(toys[,'Duration']<1858),'Size'] <- 0 # trival
toys[which(toys[,'Duration']>toy_remain),'Size'] <- 2 # ex1
toys[which(toys[,'Duration']>=toy_ex2),'Size'] <- 3 # ex2
toys[which(toys[,'Duration']%in%toy_retrain1),'Size'] <- 4 # re1
toys[which(toys[,'Duration']%in%toy_retrain2),'Size'] <- 5 # re2
toys[which(toys[,'Duration']%in%toy_retrain3),'Size'] <- 6 # re3
toys[which(toys[,'Duration']%in%toy_retrain4),'Size'] <- 7 # re4
toys[which(toys[,'Duration']%in%toy_retrain5),'Size'] <- 8 # re5
toys[which(toys[,'Duration']%in%toy_retrain6),'Size'] <- 9 # re6
toys[which(toys[,'Duration']%in%toy_retrain7),'Size'] <- 10 # re7
toys[which(toys[,'Duration']%in%toy_train1),'Size'] <- 11 # tr1
toys[which(toys[,'Duration']%in%toy_train2),'Size'] <- 12 # tr2
toys[which(toys[,'Duration']%in%toy_train3),'Size'] <- 13 # tr3
toys[which(toys[,'Duration']%in%toy_train4),'Size'] <- 14 # tr4
toys[which(toys[,'Duration']%in%toy_train5),'Size'] <- 15 # tr5
toys[which(toys[,'Duration']%in%toy_train6),'Size'] <- 16 # tr6
toys[which(toys[,'Duration']%in%toy_train7),'Size'] <- 17 # tr7
#table(toys[,'Size'])
toys_0 <- toys[which(toys[,'Size']==0),]
toys_1 <- toys[which(toys[,'Size']==1),]
toys_2 <- toys[which(toys[,'Size']==2),]
toys_3 <- toys[which(toys[,'Size']==3),]
toys_4 <- toys[which(toys[,'Size']==4),]
toys_5 <- toys[which(toys[,'Size']==5),]
toys_6 <- toys[which(toys[,'Size']==6),]
toys_7 <- toys[which(toys[,'Size']==7),]
toys_8 <- toys[which(toys[,'Size']==8),]
toys_9 <- toys[which(toys[,'Size']==9),]
toys_10 <- toys[which(toys[,'Size']==10),]
toys_11 <- toys[which(toys[,'Size']==11),]
toys_12 <- toys[which(toys[,'Size']==12),]
toys_13 <- toys[which(toys[,'Size']==13),]
toys_14 <- toys[which(toys[,'Size']==14),]
toys_15 <- toys[which(toys[,'Size']==15),]
toys_16 <- toys[which(toys[,'Size']==16),]
toys_17 <- toys[which(toys[,'Size']==17),]
toys_0 <- toys_0[order(toys_0[,'Arrival_time']),]
toys_1 <- toys_1[order(-toys_1[,'Duration'],toys_1[,'Arrival_time']),]
toys_2 <- toys_2[order(toys_2[,'Arrival_time'],toys_2[,'Duration']),]
toys_3 <- toys_3[order(-toys_3[,'Duration'],toys_3[,'Arrival_time']),]
toys_4 <- toys_4[order(toys_4[,'Arrival_time'],-toys_4[,'Duration']),]
toys_5 <- toys_5[order(toys_5[,'Arrival_time'],-toys_5[,'Duration']),]
toys_6 <- toys_6[order(toys_6[,'Arrival_time'],-toys_6[,'Duration']),]
toys_7 <- toys_7[order(toys_7[,'Arrival_time'],-toys_7[,'Duration']),]
toys_8 <- toys_8[order(toys_8[,'Arrival_time'],-toys_8[,'Duration']),]
toys_9 <- toys_9[order(toys_9[,'Arrival_time'],-toys_9[,'Duration']),]
toys_10 <- toys_10[order(toys_10[,'Arrival_time'],-toys_10[,'Duration']),]
toys_11 <- toys_11[order(toys_11[,'Arrival_time'],-toys_11[,'Duration']),]
toys_12 <- toys_12[order(toys_12[,'Arrival_time'],-toys_12[,'Duration']),]
toys_13 <- toys_13[order(toys_13[,'Arrival_time'],-toys_13[,'Duration']),]
toys_14 <- toys_14[order(toys_14[,'Arrival_time'],-toys_14[,'Duration']),]
toys_15 <- toys_15[order(toys_15[,'Arrival_time'],-toys_15[,'Duration']),]
toys_16 <- toys_16[order(toys_16[,'Arrival_time'],-toys_16[,'Duration']),]
toys_17 <- toys_17[order(toys_17[,'Arrival_time'],-toys_17[,'Duration']),]
# 7days seperate
gc(); rm(list=ls())
load('data/toys_regulated.RData'); # load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
load('comparison_GA.RData')
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
ls()
head(submissions_output)
# setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
setwd('H:/Machine_Learning/FICO/Helping-Santas-Helpers')
gc(); rm(list=ls()); source('R code/Functions.R');
load('data/toys_regulated.RData')
# load('data/toys.RData')
### break down toys dataset ###
toys <- data.matrix(toys)
toy_ex1 <- 5760; toy_ex2 <- 15480;
toy_remain <- 3080 # 2848
toy_retrain1 <- c(120:153); toy_retrain2 <- c(174:210); toy_retrain3 <- c(211:256);
toy_retrain4 <- c(257:312); toy_retrain5 <- c(313:381); toy_retrain6 <- c(382:464); toy_retrain7 <- c(465:566,30:34);
# toy_retrain1 <- c(150); toy_retrain2 <- c(183); toy_retrain3 <- c(223);
# toy_retrain4 <- c(272); toy_retrain5 <- c(331); toy_retrain6 <- c(404); toy_retrain7 <- c(492);
toy_train1 <- c(567:690,35:39); toy_train2 <- c(691:841,40:49); toy_train3 <- c(842:1025,50:59);
toy_train4 <- c(1026:1250,60:69); toy_train5 <- c(1251:1523,70:79); toy_train6 <- c(1524:1857,80:89); toy_train7 <- c(1858:2264,100:105);
toys <- data.matrix(transform(toys, Size = 0)) # trival
toys[which(toys[,'Duration']<=toy_remain),'Size'] <- 1 # remain
toys[which(toys[,'Duration']<1858),'Size'] <- 0 # trival
toys[which(toys[,'Duration']>toy_remain),'Size'] <- 2 # ex1
toys[which(toys[,'Duration']>=toy_ex2),'Size'] <- 3 # ex2
toys[which(toys[,'Duration']%in%toy_retrain1),'Size'] <- 4 # re1
toys[which(toys[,'Duration']%in%toy_retrain2),'Size'] <- 5 # re2
toys[which(toys[,'Duration']%in%toy_retrain3),'Size'] <- 6 # re3
toys[which(toys[,'Duration']%in%toy_retrain4),'Size'] <- 7 # re4
toys[which(toys[,'Duration']%in%toy_retrain5),'Size'] <- 8 # re5
toys[which(toys[,'Duration']%in%toy_retrain6),'Size'] <- 9 # re6
toys[which(toys[,'Duration']%in%toy_retrain7),'Size'] <- 10 # re7
toys[which(toys[,'Duration']%in%toy_train1),'Size'] <- 11 # tr1
toys[which(toys[,'Duration']%in%toy_train2),'Size'] <- 12 # tr2
toys[which(toys[,'Duration']%in%toy_train3),'Size'] <- 13 # tr3
toys[which(toys[,'Duration']%in%toy_train4),'Size'] <- 14 # tr4
toys[which(toys[,'Duration']%in%toy_train5),'Size'] <- 15 # tr5
toys[which(toys[,'Duration']%in%toy_train6),'Size'] <- 16 # tr6
toys[which(toys[,'Duration']%in%toy_train7),'Size'] <- 17 # tr7
#table(toys[,'Size'])
toys_0 <- toys[which(toys[,'Size']==0),]
toys_1 <- toys[which(toys[,'Size']==1),]
toys_2 <- toys[which(toys[,'Size']==2),]
toys_3 <- toys[which(toys[,'Size']==3),]
toys_4 <- toys[which(toys[,'Size']==4),]
toys_5 <- toys[which(toys[,'Size']==5),]
toys_6 <- toys[which(toys[,'Size']==6),]
toys_7 <- toys[which(toys[,'Size']==7),]
toys_8 <- toys[which(toys[,'Size']==8),]
toys_9 <- toys[which(toys[,'Size']==9),]
toys_10 <- toys[which(toys[,'Size']==10),]
toys_11 <- toys[which(toys[,'Size']==11),]
toys_12 <- toys[which(toys[,'Size']==12),]
toys_13 <- toys[which(toys[,'Size']==13),]
toys_14 <- toys[which(toys[,'Size']==14),]
toys_15 <- toys[which(toys[,'Size']==15),]
toys_16 <- toys[which(toys[,'Size']==16),]
toys_17 <- toys[which(toys[,'Size']==17),]
toys_0 <- toys_0[order(toys_0[,'Arrival_time']),]
toys_1 <- toys_1[order(-toys_1[,'Duration'],toys_1[,'Arrival_time']),]
toys_2 <- toys_2[order(toys_2[,'Arrival_time'],toys_2[,'Duration']),]
toys_3 <- toys_3[order(-toys_3[,'Duration'],toys_3[,'Arrival_time']),]
toys_4 <- toys_4[order(toys_4[,'Arrival_time'],-toys_4[,'Duration']),]
toys_5 <- toys_5[order(toys_5[,'Arrival_time'],-toys_5[,'Duration']),]
toys_6 <- toys_6[order(toys_6[,'Arrival_time'],-toys_6[,'Duration']),]
toys_7 <- toys_7[order(toys_7[,'Arrival_time'],-toys_7[,'Duration']),]
toys_8 <- toys_8[order(toys_8[,'Arrival_time'],-toys_8[,'Duration']),]
toys_9 <- toys_9[order(toys_9[,'Arrival_time'],-toys_9[,'Duration']),]
toys_10 <- toys_10[order(toys_10[,'Arrival_time'],-toys_10[,'Duration']),]
toys_11 <- toys_11[order(toys_11[,'Arrival_time'],-toys_11[,'Duration']),]
toys_12 <- toys_12[order(toys_12[,'Arrival_time'],-toys_12[,'Duration']),]
toys_13 <- toys_13[order(toys_13[,'Arrival_time'],-toys_13[,'Duration']),]
toys_14 <- toys_14[order(toys_14[,'Arrival_time'],-toys_14[,'Duration']),]
toys_15 <- toys_15[order(toys_15[,'Arrival_time'],-toys_15[,'Duration']),]
toys_16 <- toys_16[order(toys_16[,'Arrival_time'],-toys_16[,'Duration']),]
toys_17 <- toys_17[order(toys_17[,'Arrival_time'],-toys_17[,'Duration']),]
# 7days seperate
#setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
#gc(); rm(list=ls()); source('R code/Functions.R');
require(Rcpp)
sourceCpp('Latest Stable Models/greedy algorithm/main_greedy_ver2.1.cpp')
### Segmentation Elf ###
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves_rate <- myelves[,'current_rating']
### main loop ###
submissions <- solution_Elf(toys_0,toys_1,toys_2,toys_3,toys_4,toys_5,toys_6,toys_7,toys_8,
toys_9,toys_10,toys_11,toys_12,toys_13,toys_14,toys_15,toys_16,
toys_17,myelves,myelves_rate)
(submissions[which.max(submissions[,3]),3]+submissions[which.max(submissions[,3]), 4])*log(1+NUM_ELVES)
submissions_output <- names(submissions) <- c('toy_id', 'elf_id', 'elf_start_time', 'work_duration')
head(submissions_output)
submissions_output <- submissions
head(submissions_output)
head(outcome_all)
save(submissions_output, file='comparison_GA.RData')
gc(); rm(list=ls())
load('comparison_GA.RData')
ls()
head(submissions_output)
names(submissions_output)<-c('toy_id','elf_id','start_time',)
names(submissions_output)<-c('toy_id','elf_id','start_time','work_duration')
head(submissions_output)
gc(); rm(list=ls())
load('data/toys_regulated.RData'); # load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
load('comparison_GA.RData') # 'toy_id','elf_id','start_time','work_duration'
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
gc(); rm(list=ls())
load('data/toys_regulated.RData'); # load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
load('comparison_GA.RData') # 'toy_id','elf_id','start_time','work_duration'
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:1){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(submissions_output[which(submissions_output[,2]==index_num),])
#myToys <- myToys[order(x_all[[index_num]]),] # ??
#schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves))#,'fbest:',f_all[index_num])
}
gc(); rm(list=ls())
load('data/toys_regulated.RData'); # load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
load('comparison_GA.RData') # 'toy_id','elf_id','start_time','work_duration'
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:1){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(submissions_output[which(submissions_output[,2]==index_num),])
#myToys <- myToys[order(x_all[[index_num]]),] # ??
#schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves))#,'fbest:',f_all[index_num])
}
gc(); rm(list=ls())
load('data/toys_regulated.RData'); # load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
load('comparison_GA.RData') # 'toy_id','elf_id','start_time','work_duration'
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
gc(); rm(list=ls())
load('data/toys_regulated.RData'); # load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
load('comparison_GA.RData') # 'toy_id','elf_id','start_time','work_duration'
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(submissions_output[which(submissions_output[,2]==index_num),])
#myToys <- myToys[order(x_all[[index_num]]),] # ??
#schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves))#,'fbest:',f_all[index_num])
}
dim(outcome_all); head(outcome_all);
tail(outcome_all)
tail(submissions_output)
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[which.max(outcome_all[,3]), 4])*log(901)
(submissions_output[which.max(submissions_output[,3]),3]+submissions_output[which.max(submissions_output[,3]), 4])*log(901)
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[,3]),4])*log(901)
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[which.max(outcome_all[,3]), 4])*log(901)
(submissions_output[which.max(submissions_output[,3]),3]+submissions_output[which.max(submissions_output[,3]), 4])*log(901)
index_num
index_num <- 1
myToys <- data.matrix(submissions_output[which(submissions_output[,2]==index_num),])
head(myToys)
myToys <- myToys[order(myToys[,3]),] # ??
head(myToys)
myToys <- data.matrix(submissions_output[which(submissions_output[,2]==index_num),])
myToys <- myToys[-order(myToys[,3]),] # ??
head(myToys)
myToys <- data.matrix(submissions_output[which(submissions_output[,2]==index_num),])
myToys <- myToys[order(-myToys[,3]),] # ??
head(myToys)
gc(); rm(list=ls())
load('data/toys_regulated.RData'); # load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
load('comparison_GA.RData') # 'toy_id','elf_id','start_time','work_duration'
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(submissions_output[which(submissions_output[,2]==index_num),])
myToys <- myToys[order(myToys[,3]),] # ??
#schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves))#,'fbest:',f_all[index_num])
}
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[which.max(outcome_all[,3]), 4])*log(901)
(submissions_output[which.max(submissions_output[,3]),3]+submissions_output[which.max(submissions_output[,3]), 4])*log(901)
gc(); rm(list=ls())
load('data/toys_regulated.RData'); # load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
load('comparison_GA.RData') # 'toy_id','elf_id','start_time','work_duration'
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(submissions_output[which(submissions_output[,2]==index_num),])
myToys <- myToys[order(myToys[,3]),] # ??
#schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves)
outcome_score <- (outcome[which.max(outcome[,3]),3]+outcome[which.max(outcome[,3]), 4])*log(901)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', outcome_score)#,'fbest:',f_all[index_num])
}
