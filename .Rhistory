gc(); rm(list=ls())
load('simulated_annealing_1_300.RData')
ls()
x_all <- x_1_300
f_all <- f_1_300
save(x_all,f_all, file='optimization_results/simulated_annealing_1_300.RData')
load('optimization_results/simulated_annealing_1_300.RData')
gc(); rm(list=ls())
gc(); rm(list=ls())
load('data/900_Folds.RData')
load('data/toys.RData')
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
toys_dat <- data.frame(toys)
load('optimization_results/simulated_annealing_1_300.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
solution_Elf_submit <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
myToys <- myToys[schedule,]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- myelves[, 'elf_id']
c_elf_start_time <- myelves[, 'next_available_time']
c_elf_rating <- myelves[, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- updateNextAvailableMinute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- updateProductivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return(outcomes)
}
for (index_num in 1:300){
myToys <- data.matrix(toys_dat[index[[index_num]],])
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf(myToys, myelves, schedule))
}
outcome_all <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for (index_num in 1:300){
myToys <- data.matrix(toys_dat[index[[index_num]],])
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf(myToys, myelves, schedule))
}
for (index_num in 1:300){
myToys <- data.matrix(toys_dat[index[[index_num]],])
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
f_1_300
f_all
x_all[[301]]
dim(outcome_all)
load('simulated_annealing_301_600.RData')
for (index_num in 301:600){
myToys <- data.matrix(toys_dat[index[[index_num]],])
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
load('optimization_results/simulated_annealing_601_900.RData')
ls()
myelves
for (index_num in 601:900){
myToys <- data.matrix(toys_dat[index[[index_num]],])
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
dim(outcome_all)
gc(); rm(list=ls())
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
require(Rcpp)
sourceCpp('R code/c_Functions.cpp')
load('data/toys.RData')
load('R_results/baseSchedule.RData')
load('data/900_Folds.RData')
toys_dat <- data.frame(toys)
index_range <- 1:900
x_all <- list()
f_all <- matrix()
outcome_all <- list()
for (index_num in index_range){
now <- Sys.time()
cat(paste('\n\n Elf:',index_num))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),]
if(nrow(myToys)==length(xbest)){
schedule <- xbest
}else{
schedule <- c(1:nrow(myToys))
}
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
### parameters ###
C <- 1 # multiple cooling chain
N0 <- runif(C)*nrow(myToys) # initial point
h <- 10 # used to modulate the step length.
S <- 5 # current value times, step width
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
#         while(fbest > 1800000000){
for (s in 1:S){
cat(paste('\n - Step:',s, 'bk:', bk))
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
x1 <- xbest
x1[partition_1:partition_2] <- sample(x1[partition_1:partition_2])
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',round(delta), '!!!'))
cat(paste('\n -- Find Global Improvement!!! Current Score:',round(fbest), 'bk:', bk))
bk <- 0
}else{
#                         cat(paste('\n -- Failed~:',fx1, '(', delta,')'))
bk <- bk + 1
#                         if (bk > 3) break
}
if (bk > 10) break
}
}
#         }
}
### Record ###
x_all[[index_num]] <- xbest
f_all[index_num] <- fbest
#     outcome_all[[index_num]] <- solution_Elf_outcome(myToys, myelves, xbest)
cat(paste('\n Time used:',Sys.time() - now, '!!!\n'))
}
load('elf_1.RData')
for (index_num in index_range){
now <- Sys.time()
cat(paste('\n\n Elf:',index_num))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),]
if(nrow(myToys)==length(xbest)){
schedule <- xbest
}else{
schedule <- c(1:nrow(myToys))
}
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
### parameters ###
C <- 1 # multiple cooling chain
N0 <- runif(C)*nrow(myToys) # initial point
h <- 10 # used to modulate the step length.
S <- 5 # current value times, step width
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
Ns <- xbest[N0[c]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
#         while(fbest > 1800000000){
for (s in 1:S){
cat(paste('\n - Step:',s, 'bk:', bk))
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
x1 <- xbest
x1[partition_1:partition_2] <- sample(x1[partition_1:partition_2])
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',round(delta), '!!!'))
cat(paste('\n -- Find Global Improvement!!! Current Score:',round(fbest), 'bk:', bk))
bk <- 0
}else{
#                         cat(paste('\n -- Failed~:',fx1, '(', delta,')'))
bk <- bk + 1
#                         if (bk > 3) break
}
if (bk > 10) break
}
}
#         }
}
### Record ###
x_all[[index_num]] <- xbest
f_all[index_num] <- fbest
#     outcome_all[[index_num]] <- solution_Elf_outcome(myToys, myelves, xbest)
cat(paste('\n Time used:',Sys.time() - now, '!!!\n'))
}
f_all
save(x_all,f_all, file='simulated_annealing_1_900.RData')
ls()
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
for (index_num in 1:900){
myToys <- data.matrix(toys_dat[index[[index_num]],])
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
load('data/toys.RData')
toys_dat <- data.frame(toys)
for (index_num in 1:900){
myToys <- data.matrix(toys_dat[index[[index_num]],])
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
index_num <- 1
myToys <- data.matrix(toys_dat[index[[index_num]],])
schedule <- x_all[[index_num]]
schedule
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome
solution_Elf_c(myToys, myelves, schedule)
f_all[index_num]
f_all
for (index_num in 1:900){
myToys <- data.matrix(toys_dat[index[[index_num]],])
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
dim(outcome_all)
outcome_all <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
dim(outcome_all)
gc()
gc(); rm(list=ls())
load('data/900_Folds.RData')
load('data/toys.RData')
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = nrow(toys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
dim(outcome_all)
load('simulated_annealing_1_900.RData')
ls()
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
dim(outcome_all)
for (index_num in 1:900){
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
outcome_all <- matrix(0, nrow = 0, ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for (index_num in 1:900){
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
for (index_num in 1:10){
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
dim(outcome_all)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
for (index_num in 1:900){
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
dim(submissions_output)
dim(outcome_all)
submissions_output <- data.frame(ToyId = as.integer(outcome_all[,1]),
ElfId = as.integer(outcome_all[,2]),
StartTime = convert_to_chardate(outcome_all[,3]),
Duration = as.integer(outcome_all[,4]), stringsAsFactors = FALSE)
dim(outcome_all); head(outcome_all)
dim(submissions_output)
write.csv(submissions_output, 'toys_submission_SA_test.csv', row.names = FALSE)
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
load('data/toys.RData'); load('data/900_Folds.RData'); load('simulated_annealing_1_900.RData')
require(Rcpp)
sourceCpp('R code/c_Functions.cpp')
index_range <- 1:8000 # 5pm-8am | 1.8 min | 33/Hour | 215
toys_dat <- data.frame(toys)
C <- 8 # multiple cooling chain
h <- 0 # used to modulate the step length.
S <- c(1,10,30,100,300,1000,3000,6000,9000,11000) #c(1,3,9,30,90,300,1000,3000,9000) # current value times, step width
NUM_ELVES <- 1
for (index_num in index_range){
n <- match(max(f_all[1:900]),f_all)
set.seed(n)
now <- Sys.time()
cat(paste('\n\nRound :',index_num))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
if(c==1){
Ns <- 6588
}else{
Ns <- xbest[N0[c]]
}
Nd <- xbest[N0[min(c+1, C)]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
for (s in S){
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
p <- runif(1)
if(p<=0.5){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1 <- xbest
x1[rep_range] <- sample(x1[rep_range])
}else{
partition_1 <- max((Ns-Np),1):min((Ns+Np),toy_row) ## New
partition_2 <- max((Nd-Np),1):min((Nd+Np),toy_row)
regulate_rng <- min(length(partition_1),length(partition_2))
partition_1 <- partition_1[1:regulate_rng]
partition_2 <- partition_2[1:regulate_rng]
x1 <- xbest
ori_partition <- sample(x1[partition_1]) ## New
des_partition <- sample(x1[partition_2])
x1[partition_1] <- des_partition
x1[partition_2] <- ori_partition
}
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',round(delta), '!!!'))
cat(paste('\n -- Find Global Improvement!!! Current Score:',round(fbest), 'bk:', bk))
bk <- 0
}
}
}
}
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
cat(paste('\n Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
}
index_range <- 1:8000 # 5pm-8am | 1.8 min | 33/Hour | 215
toys_dat <- data.frame(toys)
C <- 8 # multiple cooling chain
h <- 0 # used to modulate the step length.
S <- c(1,10,30,100,300,1000,3000,6000,9000,11000) #c(1,3,9,30,90,300,1000,3000,9000) # current value times, step width
NUM_ELVES <- 1
for (index_num in index_range){
n <- match(max(f_all[1:900]),f_all)
set.seed(n)
now <- Sys.time()
cat(paste('\n\nRound :',index_num))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
if(c==1){
Ns <- 6588
}else{
Ns <- xbest[N0[c]]
}
Nd <- xbest[N0[min(c+1, C)]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
for (s in S){
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
p <- runif(1)
if(p<=0.5){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1 <- xbest
x1[rep_range] <- sample(x1[rep_range])
}else{
partition_1 <- max((Ns-Np),1):min((Ns+Np),toy_row) ## New
partition_2 <- max((Nd-Np),1):min((Nd+Np),toy_row)
regulate_rng <- min(length(partition_1),length(partition_2))
partition_1 <- partition_1[1:regulate_rng]
partition_2 <- partition_2[1:regulate_rng]
x1 <- xbest
ori_partition <- sample(x1[partition_1]) ## New
des_partition <- sample(x1[partition_2])
x1[partition_1] <- des_partition
x1[partition_2] <- ori_partition
}
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',round(delta), '!!!'))
cat(paste('\n -- Find Global Improvement!!! Current Score:',round(fbest)))
}
}
}
}
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
cat(paste('\n Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
}
range(x_all)
range(f_all)
gc(); rm(list=ls())
load('simulated_annealing_1_900.RData')
ls
ls()
submit <- read.csv('toys_submission_SA_test.csv', stringsAsFactors=F)
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
gc(); rm(list=ls())
load('data/900_Folds.RData')
load('data/toys.RData')
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
myelves
myelves[,'elf_id'] <- index_num
index_num <- 14
myelves[,'elf_id'] <- index_num
myelves
gc(); rm(list=ls())
load('data/900_Folds.RData')
load('data/toys.RData')
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
dim(outcome_all); head(outcome_all)
submissions_output <- data.frame(ToyId = as.integer(outcome_all[,1]),
ElfId = as.integer(outcome_all[,2]),
StartTime = convert_to_chardate(outcome_all[,3]),
Duration = as.integer(outcome_all[,4]), stringsAsFactors = FALSE)
dim(submissions_output)
length(table(outcome_all[,1])); length(table(outcome_all[,2]))
write.csv(submissions_output, 'toys_submission_SA_test.csv', row.names = FALSE)
