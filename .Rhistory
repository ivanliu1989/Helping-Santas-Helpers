gc()
gc()
library(doMC)
registerDoMC(cores = 1)
gc()
registerDoMC(cores = NULL)
install.packages(c("AICcmodavg", "deSolve", "Ecfun", "evtree", "highr", "knitr", "mboost", "mime", "minqa", "pcaPP", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "rjags", "rjson", "rmarkdown", "RSQLite", "tis"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv", "nlme"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list=ls(all=TRUE));gc(reset=TRUE);par(mfrow=c(1,1))
contributors()
gc()
gui.classify()
require(stylo)
gui.classify()
gui.oppose()
1906561661/log(901)
convert_to_chardate <- function(arrive_int) {
char_date <- format(reference_time + arrive_int * 60, format = '%Y %m %d %H %M', tz = 'UTC')
return(char_date)
}
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
convert_to_chardate(280232261)
install.packages("Rmpi")
install.packages(c("cluster", "KernSmooth", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
load('data/toys.RData'); load('data/900_Folds.RData'); load('simulated_annealing_1_900.RData')
#################
### Functions ###
#################
### f(x) ###
require(Rcpp)
sourceCpp('R code/c_Functions.cpp')
index_range <- 1:8000 # 5pm-8am | 1.8 min | 33/Hour | 215
toys_dat <- data.frame(toys)
C <- 8 # multiple cooling chain
h <- 0 # used to modulate the step length.
S <- c(1,10,30,100,300,1000,3000,6000,9000,11000) #c(1,3,9,30,90,300,1000,3000,9000) # current value times, step width
NUM_ELVES <- 1
for (index_num in index_range){
n <- match(max(f_all[1:900]),f_all)
set.seed(n)
now <- Sys.time()
cat(paste('\n\nRound :',index_num))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
if(c==1){
Ns <- 6588
}else{
Ns <- xbest[N0[c]]
}
Nd <- xbest[N0[min(c+1, C)]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
for (s in S){
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
p <- runif(1)
if(p<=0.5){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1 <- xbest
x1[rep_range] <- sample(x1[rep_range])
}else{
partition_1 <- max((Ns-Np),1):min((Ns+Np),toy_row) ## New
partition_2 <- max((Nd-Np),1):min((Nd+Np),toy_row)
regulate_rng <- min(length(partition_1),length(partition_2))
partition_1 <- partition_1[1:regulate_rng]
partition_2 <- partition_2[1:regulate_rng]
x1 <- xbest
ori_partition <- sample(x1[partition_1]) ## New
des_partition <- sample(x1[partition_2])
x1[partition_1] <- des_partition
x1[partition_2] <- ori_partition
}
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
if(length(x1)==length(table(x1))){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
}else{
cat(paste('\n -- Error happened during scheduling!!! Toy Number:',length(x1), 'Unique Tasks:',length(table(x1))))
}
}
}
}
}
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
cat(paste('\n Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
}
fbest
length(xbest)
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
index_range <- 1:8000 # 5pm-8am | 1.8 min | 33/Hour | 215
toys_dat <- data.frame(toys)
C <- 8 # multiple cooling chain
h <- 0 # used to modulate the step length.
S <- c(1,10,30,100,300,1000,3000,6000,9000,11000) #c(1,3,9,30,90,300,1000,3000,9000) # current value times, step width
NUM_ELVES <- 1
for (index_num in index_range){
n <- match(max(f_all[1:900]),f_all)
set.seed(n)
now <- Sys.time()
cat(paste('\n\nRound :',index_num))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
if(c==1){
Ns <- 6588
}else{
Ns <- xbest[N0[c]]
}
Nd <- xbest[N0[min(c+1, C)]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
for (s in S){
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
p <- runif(1)
if(p<=0.5){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1 <- xbest
x1[rep_range] <- sample(x1[rep_range])
}else{
partition_1 <- max((Ns-Np),1):min((Ns+Np),toy_row) ## New
partition_2 <- max((Nd-Np),1):min((Nd+Np),toy_row)
regulate_rng <- min(length(partition_1),length(partition_2))
partition_1 <- partition_1[1:regulate_rng]
partition_2 <- partition_2[1:regulate_rng]
x1 <- xbest
ori_partition <- sample(x1[partition_1]) ## New
des_partition <- sample(x1[partition_2])
x1[partition_1] <- des_partition
x1[partition_2] <- ori_partition
}
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
if(length(x1)==length(table(x1))){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
}else{
cat(paste('\n -- Error happened during scheduling!!! Toy Number:',length(x1), 'Unique Tasks:',length(table(x1))))
break
}
}
}
}
}
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
cat(paste('\n Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
}
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
index_range <- 1:8000 # 5pm-8am | 1.8 min | 33/Hour | 215
toys_dat <- data.frame(toys)
C <- 8 # multiple cooling chain
h <- 0 # used to modulate the step length.
S <- c(1,10,30,100,300,1000,3000,6000,9000) #c(1,3,9,30,90,300,1000,3000,9000) # current value times, step width
NUM_ELVES <- 1
for (index_num in index_range){
n <- match(max(f_all[1:900]),f_all)
set.seed(n)
now <- Sys.time()
cat(paste('\n\nRound :',index_num))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
if(c==1){
Ns <- 6588
}else{
Ns <- xbest[N0[c]]
}
Nd <- xbest[N0[min(c+1, C)]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
for (s in S){
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
p <- runif(1)
if(p<=0.5){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1 <- xbest
x1[rep_range] <- sample(x1[rep_range])
}else{
partition_1 <- max((Ns-Np),1):min((Ns+Np),toy_row) ## New
partition_2 <- max((Nd-Np),1):min((Nd+Np),toy_row)
regulate_rng <- min(length(partition_1),length(partition_2))
partition_1 <- partition_1[1:regulate_rng]
partition_2 <- partition_2[1:regulate_rng]
x1 <- xbest
ori_partition <- sample(x1[partition_1]) ## New
des_partition <- sample(x1[partition_2])
x1[partition_1] <- des_partition
x1[partition_2] <- ori_partition
}
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
}else{
cat(paste('\n -- Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
}
}
}
}
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
cat(paste('\n Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
}
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
index_range <- 1:8000 # 5pm-8am | 1.8 min | 33/Hour | 215
toys_dat <- data.frame(toys)
C <- 8 # multiple cooling chain
h <- 0 # used to modulate the step length.
S <- c(1,10,30,100,300,1000,3000,6000,9000) #c(1,3,9,30,90,300,1000,3000,9000) # current value times, step width
NUM_ELVES <- 1
for (index_num in index_range){
n <- match(max(f_all[1:900]),f_all)
set.seed(n)
now <- Sys.time()
cat(paste('\n\nRound :',index_num))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
if(c==1){
Ns <- 6588
}else{
Ns <- xbest[N0[c]]
}
Nd <- xbest[N0[min(c+1, C)]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
for (s in S){
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
p <- runif(1)
if(p<=0.5){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1 <- xbest
x1[rep_range] <- sample(x1[rep_range])
}else{
partition_1 <- max((Ns-Np),1):min((Ns+Np),toy_row) ## New
partition_2 <- max((Nd-Np),1):min((Nd+Np),toy_row)
regulate_rng <- min(length(partition_1),length(partition_2))
partition_1 <- partition_1[1:regulate_rng]
partition_2 <- partition_2[1:regulate_rng]
x1 <- xbest
ori_partition <- sample(x1[partition_1]) ## New
des_partition <- sample(x1[partition_2])
x1[partition_1] <- des_partition
x1[partition_2] <- ori_partition
}
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
bk <- 0
}else{
cat(paste('\n -- Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
}else{
bk <- bk + 1
}
if (bk > 10) break
}
}
}
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
cat(paste('\n Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
}
index_range <- 1:8000 # 5pm-8am | 1.8 min | 33/Hour | 215
toys_dat <- data.frame(toys)
C <- 8 # multiple cooling chain
h <- 0 # used to modulate the step length.
S <- c(1,10,30,100,300,1000,3000,6000,9000,11000) #c(1,3,9,30,90,300,1000,3000,9000) # current value times, step width
NUM_ELVES <- 1
for (index_num in index_range){
n <- match(max(f_all[1:900]),f_all)
set.seed(n)
now <- Sys.time()
cat(paste('\n\nRound :',index_num))
cat(paste('\n Elf:',n))
### Toys establishment ###
myToys <- data.matrix(toys_dat[index[[n]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[n]]
myelves <- create_elves(NUM_ELVES)
### parameters ###
N0 <- runif(C)*nrow(myToys) # initial point
x0 <- schedule; fx0 <- solution_Elf_c(myToys, myelves, x0)
xbest <- x0; fbest <- fx0
for (c in 1:C){
toy_row <- nrow(myToys)
if(c==1){
Ns <- 6588
}else{
Ns <- xbest[N0[c]]
}
Nd <- xbest[N0[min(c+1, C)]]
cat(paste('\nChain:',c, '; Initial point:', Ns, '; Current best score:', round(fbest)))
bk <-0
for (s in S){
Np <- (1+h+s/10)
num <- length(max((Ns-Np),1):min((Ns+Np),toy_row))
for (np in 1:num){
p <- runif(1)
if(p<=0.5){
partition_1 <- max(((np-1)/num)*toy_row + 1, 1)
partition_2 <- min((np/num)*toy_row, toy_row)
rep_range <- as.integer(partition_1:partition_2)
x1 <- xbest
x1[rep_range] <- sample(x1[rep_range])
}else{
partition_1 <- max((Ns-Np),1):min((Ns+Np),toy_row) ## New
partition_2 <- max((Nd-Np),1):min((Nd+Np),toy_row)
regulate_rng <- min(length(partition_1),length(partition_2))
partition_1 <- partition_1[1:regulate_rng]
partition_2 <- partition_2[1:regulate_rng]
x1 <- xbest
ori_partition <- sample(x1[partition_1]) ## New
des_partition <- sample(x1[partition_2])
x1[partition_1] <- des_partition
x1[partition_2] <- ori_partition
}
fx1 <- solution_Elf_c(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
a <- length(x1); b <- length(table(x1))
if(a==b){
xbest <- x1; fbest <- fx1
cat(paste('\n +++++ Find Improvement:',round(delta), '!!! Current Score:',round(fbest)))
bk <- 0
}else{
cat(paste('\n ***** Error happened during scheduling!!! Toy Number:',a, 'Unique Tasks:',b))
break
}
}else{
bk <- bk + 1
}
if (bk > 10) break
}
}
}
x_all[[n]] <- xbest # Record
f_all[n] <- fbest
cat(paste('\n Time used:',round(Sys.time() - now, digits = 2), '!!!\n'))
if(index_num %% 100 == 0) save(x_all,f_all, file='optimization_results/Simulated_Annealing_All_temp.RData')
}
save(x_all,f_all, file='optimization_results/Simulated_Annealing_All.RData')
range(f_all)
gc(); rm(list=ls())
load('data/900_Folds.RData')
load('data/toys.RData')
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
load('optimization_results/Simulated_Annealing_All.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[index[[index_num]],])
myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
dim(outcome_all); head(outcome_all);
length(table(outcome_all[,1])); length(table(outcome_all[,2]))
submissions_output <- data.frame(ToyId = as.integer(outcome_all[,1]),
ElfId = as.integer(outcome_all[,2]),
StartTime = convert_to_chardate(outcome_all[,3]),
Duration = as.integer(outcome_all[,4]), stringsAsFactors = FALSE)
dim(submissions_output)
write.csv(submissions_output, 'toys_submission_SA_test.csv', row.names = FALSE)
