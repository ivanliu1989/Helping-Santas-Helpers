myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
myelves <- create_elves(NUM_ELVES)
head(toys)
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(myelves)
}
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(myelves)
}
submissions <- solution_sortedElf(toys[1:100,], myelves)
submissions
submissions <- solution_sortedElf(toys[1:1000,], myelves)
submissions
current_toy <- 100
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
myToys <- toys
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
next_elf
myelves
elves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, elves)
elves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, elves)
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
myelves
assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
assigned_elf
myelves[1,3] <- 1000
c_toy_arrival
c_toy_duration
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
myelves
cost <- as.integer(ceiling(c_toy_duration/myelves[, 'current_rating'])) *
(1 + ifelse(myelves[, 'next_available_time']==540, log(2), log(1))) *
max(myelves[, 'next_available_time'] / c_toy_arrival, 1)
cost
(1 + ifelse(myelves[, 'next_available_time']==540, log(2), log(1)))
cost <- as.integer(ceiling(c_toy_duration/myelves[, 'current_rating'])) *
(1 + ifelse(myelves[, 'next_available_time']==540, log(1), log(2))) *
max(myelves[, 'next_available_time'] / c_toy_arrival, 1)
cost
elf_cost <- function(c_toy_arrival, c_toy_duration, myelves){
cost <- as.integer(ceiling(c_toy_duration/myelves[, 'current_rating'])) *
(1 + ifelse(myelves[, 'next_available_time']==540, log(1), log(2))) *
max(myelves[, 'next_available_time'] / c_toy_arrival, 1)
return(cost)
}
assign_elf <- function(c_toy_arrival, c_toy_duration, myelves) {
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
return(assigned_elf)
}
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(myelves)
}
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys[1:1000,], myelves)
submissions
submissions[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, submissions)
submissions
as.integer(ceiling(c_toy_duration/submissions[, 'current_rating']))
max(submissions[, 'next_available_time'] / c_toy_arrival, 1)
submissions[, 'next_available_time']
myelves[, 'next_available_time'] / c_toy_arrival
submissions[, 'next_available_time']
submissions[, 'next_available_time'] / 10
c_toy_arrival
submissions[, 'next_available_time'] / 9
c_toy_arrival
as.integer(c_toy_arrival)
myelves[, 'next_available_time'] / as.integer(c_toy_arrival)
myelves[, 'next_available_time'] / 9
myelves[, 'next_available_time']
submissions[, 'next_available_time'] / c_toy_arrival
c_toy_arrival
max(submissions[, 'next_available_time'] / c_toy_arrival, 1)
max(submissions[, 'next_available_time'] / c_toy_arrival, rep(1,900))
rep(1,900)
matrix(rep(1,900))
max(submissions[, 'next_available_time'] / c_toy_arrival, matrix(rep(1,900)))
submission[, 'next_available_time'] / c_toy_arrival
submissions[, 'next_available_time'] / c_toy_arrival
matrix(rep(1,900))
data.matrix(rep(1,900))
rep(1,900)
max(submissions[, 'next_available_time'] / c_toy_arrival, rep(1,900))
lapply(submissions[, 'next_available_time'] / c_toy_arrival, max(x, 1))
lapply(submissions[, 'next_available_time'] / c_toy_arrival, function(x) max(x, 1))
sapply(submissions[, 'next_available_time'] / c_toy_arrival, max( 1))
sapply(submissions[, 'next_available_time'] / c_toy_arrival, max())
sapply(submissions[, 'next_available_time'] / c_toy_arrival, max(,1))
apply(submissions[, 'next_available_time'] / c_toy_arrival, function(x) max(x, 1))
apply(submissions[, 'next_available_time'] / c_toy_arrival,FUN = max(x, 1))
apply(submissions[, 'next_available_time'] / c_toy_arrival,FUN = function(x) max(x, 1))
apply(submissions[, 'next_available_time'] / c_toy_arrival,MARGIN = 1,FUN = function(x) max(x, 1))
apply(submissions[, 'next_available_time'] / c_toy_arrival,MARGIN = 2,FUN = function(x) max(x, 1))
?apply
myelves[, 'next_available_time'] / c_toy_arrival
submissions[, 'next_available_time'] / c_toy_arrival
comp3 <- submissions[, 'next_available_time'] / c_toy_arrival
comp3
comp3[which(comp3<1)]
comp3[which(comp3<1)] <- 1
comp3
comp3[900] <- 0.5
comp3
comp3[which(comp3<1)] <- 1
comp3
as.integer(ceiling(c_toy_duration/submissions[, 'current_rating']))
ceiling(c_toy_duration/submissions[, 'current_rating'])
(1 + submissions(myelves[, 'next_available_time']==540, log(1), log(2)))
(1 + (submissions[, 'next_available_time']==540, log(1), log(2)))
(1 + ifelse(myelves[, 'next_available_time']==540, log(1), log(2)))
(1 + ifelse(submissions[, 'next_available_time']==540, log(1), log(2)))
comp1 <- ceiling(c_toy_duration/submissions[, 'current_rating'])
comp2 <- (1 + ifelse(submissions[, 'next_available_time']==540, log(1), log(2)))
comp3 <- submissions[, 'next_available_time'] / c_toy_arrival
comp3[which(comp3<1)] <- 1
comp1 * comp2 * comp3
comp1[1] * comp2[1] * comp3[1]
comp1[2] * comp2[2] * comp3[2]
elf_cost <- function(c_toy_arrival, c_toy_duration, myelves){
comp1 <- ceiling(c_toy_duration/myelves[, 'current_rating'])
comp2 <- (1 + ifelse(myelves[, 'next_available_time']==540, log(1), log(2)))
comp3 <- myelves[, 'next_available_time'] / c_toy_arrival
comp3[which(comp3<1)] <- 1
cost <-  comp1 * comp2 * comp3
return(cost)
}
assign_elf <- function(c_toy_arrival, c_toy_duration, myelves) {
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
return(assigned_elf)
}
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(myelves)
}
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys[1:1000,], myelves)
submissions
submissions[which(submissions[,3]==540),]
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, submissions)
next_elf
submissions[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, submissions)
submissions
log(3)
log(2)
log(900)
log(899)
log(799)
log(2)
log(3)
myelves[, 'next_available_time']==540
sum(myelves[, 'next_available_time']==540)
elf_cost <- function(c_toy_arrival, c_toy_duration, myelves){
comp1 <- ceiling(c_toy_duration/myelves[, 'current_rating'])
comp2 <- (1 + ifelse(myelves[, 'next_available_time']==540,
log(sum(myelves[, 'next_available_time']==540)), log(sum(myelves[, 'next_available_time']==540)+1)))
comp3 <- myelves[, 'next_available_time'] / c_toy_arrival
comp3[which(comp3<1)] <- 1
cost <-  comp1 * comp2 * comp3
return(cost)
}
submissions[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, submissions)
submissions
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, submissions)
next_elf
assign_elf <- function(c_toy_arrival, c_toy_duration, myelves) {
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
return(assigned_elf)
}
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(myelves)
}
elf_cost <- function(c_toy_arrival, c_toy_duration, myelves){
comp1 <- ceiling(c_toy_duration/myelves[, 'current_rating'])
comp2 <- (1 + ifelse(myelves[, 'next_available_time']==540,
log(sum(myelves[, 'next_available_time']==540)), log(sum(myelves[, 'next_available_time']==540)+1)))
comp3 <- myelves[, 'next_available_time'] / c_toy_arrival
comp3[which(comp3<1)] <- 1
cost <-  comp1 * comp2 * comp3
return(cost)
}
assign_elf <- function(c_toy_arrival, c_toy_duration, myelves) {
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
return(assigned_elf)
}
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(myelves)
}
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys[1:1000,], myelves)
submissions
submissions[which(submissions[,3]==540),]
submissions[order(submissions[,3]),]
submissions[order(submissions[,2]),]
submissions <- solution_sortedElf(toys[1:10000,], myelves)
submissions[order(submissions[,2]),]
submissions[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, submissions)
submissions
assigned_elf <-as.integer(submissions[which.min(submissions[,'score']),'elf_id'][1])
assigned_elf
submissions[which(submissions[,1]==767),]
elf_cost <- function(c_toy_arrival, c_toy_duration, myelves){
comp1 <- ceiling(c_toy_duration/myelves[, 'current_rating'])
comp2 <- (1 + ifelse(myelves[, 'next_available_time']==540,
log(sum(myelves[, 'next_available_time']==540)), log(sum(myelves[, 'next_available_time']==540)+1)))*10
comp3 <- myelves[, 'next_available_time'] / c_toy_arrival
comp3[which(comp3<1)] <- 1
cost <-  comp1 * comp2 * comp3
return(cost)
}
assign_elf <- function(c_toy_arrival, c_toy_duration, myelves) {
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
return(assigned_elf)
}
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(myelves)
}
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys[1:10000,], myelves)
submissions
submissions[order(submissions[,2]),]
submissions[order(submissions[,1]),]
submissions[order(submissions[,3]),]
elf_cost <- function(c_toy_arrival, c_toy_duration, myelves){
comp1 <- ceiling(c_toy_duration/myelves[, 'current_rating'])
comp2 <- (1 + ifelse(myelves[, 'next_available_time']==540,
log(sum(myelves[, 'next_available_time']==540)), log(sum(myelves[, 'next_available_time']==540)+1)))
comp3 <- myelves[, 'next_available_time'] / c_toy_arrival
comp3[which(comp3<1)] <- 1
cost <-  comp1 * comp2 * comp3
return(cost)
}
assign_elf <- function(c_toy_arrival, c_toy_duration, myelves) {
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
return(assigned_elf)
}
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys[1:10000,], myelves)
tail(submissions)
submissions_output <- data.frame(ToyId = as.integer(submissions[,1]),
ElfId = as.integer(submissions[,2]),
StartTime = convert_to_chardate(submissions[,3]),
Duration = as.integer(submissions[,4]), stringsAsFactors = FALSE)
tail(submissions_output)
elf_cost <- function(c_toy_arrival, c_toy_duration, myelves){
comp1 <- ceiling(c_toy_duration/myelves[, 'current_rating'])
comp2 <- (1 + ifelse(myelves[, 'next_available_time']==540,
log(sum(myelves[, 'next_available_time']==540)), log(sum(myelves[, 'next_available_time']==540)+1)))*10
comp3 <- myelves[, 'next_available_time'] / c_toy_arrival
comp3[which(comp3<1)] <- 1
cost <-  comp1 * comp2 * comp3
return(cost)
}
assign_elf <- function(c_toy_arrival, c_toy_duration, myelves) {
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
return(assigned_elf)
}
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys[1:10000,], myelves)
submissions_output <- data.frame(ToyId = as.integer(submissions[,1]),
ElfId = as.integer(submissions[,2]),
StartTime = convert_to_chardate(submissions[,3]),
Duration = as.integer(submissions[,4]), stringsAsFactors = FALSE)
tail(submissions_output)
elf_cost <- function(c_toy_arrival, c_toy_duration, myelves){
comp1 <- ceiling(c_toy_duration/myelves[, 'current_rating'])
#     comp2 <- (1 + ifelse(myelves[, 'next_available_time']==540,
#                          log(sum(myelves[, 'next_available_time']==540)), log(sum(myelves[, 'next_available_time']==540)+1)))
comp3 <- myelves[, 'next_available_time'] / c_toy_arrival
comp3[which(comp3<1)] <- 1
cost <-  comp1 * comp3
return(cost)
}
assign_elf <- function(c_toy_arrival, c_toy_duration, myelves) {
myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
return(assigned_elf)
}
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(c_toy_arrival, c_toy_duration, myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys[1:10000,], myelves)
submissions_output <- data.frame(ToyId = as.integer(submissions[,1]),
ElfId = as.integer(submissions[,2]),
StartTime = convert_to_chardate(submissions[,3]),
Duration = as.integer(submissions[,4]), stringsAsFactors = FALSE)
tail(submissions_output)
