#     :param minute: integer representing a minute since reference time
#     :return: next sanctioned minute
if(is_sanctioned_time(hours_init, minute) & is_sanctioned_time(hours_init, (minute+1))){
return(minute + 1)
}
num_days <- minute / hours_init$minutes_in_24h
return(hours_init$day_start + (num_days + 1) * hours_init$minutes_in_24h)
}
next_sanctioned_minute(hours_init, hours_init$day_end)
next_sanctioned_minute(hours_init, hours_init$day_start)
next_sanctioned_minute(hours_init, hours_init$day_start+12)
?range
range(1,10)
1:10
550:549
get_sanctioned_breakdown <- function(hours_init, start_minute, duration){
#     Whole days (24-hr time periods) contribute fixed quantities of sanctioned and unsanctioned time. After
#     accounting for the whole days in the duration, the remainder minutes are tabulated as un/sanctioned.
#     :param start_minute:
#     :param duration:
#     :return:
full_days <- duration / (hours_init$minutes_in_24h)
sanctioned <- full_days * hours_init$hours_per_day * 60
unsanctioned <- full_days * (24 - hours_init$hours_per_day) * 60
remainder_start <- start_minute + full_days * hours_init$minutes_in_24h
for(minute in remainder_start:(start_minute+duration-1)){
if (is_sanctioned_time(hours_init, minute)){
sanctioned <- sanctioned + 1
}else{
unsanctioned <- unsanctioned + 1
}
}
return (data.frame(sanctioned=sanctioned, unsanctioned=unsanctioned))
}
get_sanctioned_breakdown(hours_init, 12*60, 100)
remainder_start:(start_minute+duration-1)
full_days <- duration / (hours_init$minutes_in_24h)
full_days
full_days
sanctioned <- full_days * hours_init$hours_per_day * 60
sanctioned
unsanctioned <- full_days * (24 - hours_init$hours_per_day) * 60
unsanctioned
get_sanctioned_breakdown(hours_init, 12*60, 100)
get_sanctioned_breakdown(hours_init, 12*60, 1000)
1000 / (hours_init$minutes_in_24h)
1000 / (hours_init$minutes_in_24h) * hours_init$hours_per_day * 60
apply_resting_period <- function(hours_init, start, num_unsanctioned){
#     Enforces the rest period and returns the minute when the elf is next available for work.
#     Rest period is only applied to sanctioned work hours.
#     :param start: minute the REST period starts
#     :param num_unsanctioned: always > 0 number of unsanctioned minutes that need resting minutes
#     :return: next available minute after rest period has been applied
num_days_since_jan1 <- start / hours_init$minutes_in_24h
rest_time <- num_unsanctioned
rest_time_in_working_days <- rest_time / (60 * hours_init$hours_per_day)
rest_time_remaining_minutes <- rest_time %% (60 * hours_init$hours_per_day)
#     rest time is only applied to sanctioned work hours. If local_start is at an unsanctioned time,
#     need to set it to be the next start of day
local_start <- start %% hours_init$minutes_in_24h  # minute of the day (relative to a current day) the work starts
if(local_start < hours_init$day_start){
local_start <- hours_init$day_start
}else if(local_start > hours_init$day_end){
num_days_since_jan1 <- num_days_since_jan1 + 1
}
local_start <- hours_init$day_start
if((local_start + rest_time_remaining_minutes) > hours_init$day_end){
rest_time_in_working_days <- rest_time_in_working_days + 1
}
rest_time_remaining_minutes <- rest_time_remaining_minutes - (hours_init$day_end - local_start)
local_start <- hours_init$day_start
total_days <- num_days_since_jan1 + rest_time_in_working_days
return (total_days * hours_init$minutes_in_24h + local_start + rest_time_remaining_minutes)
}
next_sanctioned_minute(hours_init, hours_init$day_start+12)
get_sanctioned_breakdown(hours_init, 12*60, 1000)
####################################
apply_resting_period(hours_init, 12*60, 585.3333)
12*60
elf <- data.frame(elfid = 1:900)
elf
elf_init <- function(input){
id <- input$elfid
rating <- 1.0
next_available_time <- 540  # Santa's Workshop opens Jan 1, 2014 9:00 (= 540 minutes)
rating_increase <- 1.02
rating_decrease <- 0.90
return(data.frame(id=id, rating=rating, next_available_time=next_available_time,
rating_increase=rating_increase, rating_decrease=rating_decrease))
}
elf_init(elf[1,])
elf_init(elf[1])
elf_init(elf)
elf_init(elf[1,1])
elf_init(elf[,1])
elf_init(elf)
elf_init
elf_init <- function(input){
#     Each Elf starts with a rating of 1.0 and are available at 09:00 on Jan 1.
id <- input$elfid
rating <- 1.0
next_available_time <- 540  # Santa's Workshop opens Jan 1, 2014 9:00 (= 540 minutes)
rating_increase <- 1.02
rating_decrease <- 0.90
return(data.frame(id=id, rating=rating, next_available_time=next_available_time,
rating_increase=rating_increase, rating_decrease=rating_decrease))
}
elf_init(elf)
elf_list <- elf_init(elf)
update_elf <- function(elf_list, hrs, toy, start_minute, duration){
#     Updates the elf's productivity rating and next available time based on last toy completed.
#     :param hrs: Hours object for bookkeeping
#     :param toy: Toy object for the toy the elf just finished
#     :param start_minute: minute work started
#     :param duration: duration of work, in minutes
#     :return: void
elf_list$update_next_available_minute(hrs, start_minute, duration)
elf_list$update_productivity(hrs, start_minute, int(math.ceil(toy.duration / self.rating)))
}
?round
floor(1.23123)
ceiling(1.213123)
update_elf <- function(elf_list, hrs, toy, start_minute, duration){
#     Updates the elf's productivity rating and next available time based on last toy completed.
#     :param hrs: Hours object for bookkeeping
#     :param toy: Toy object for the toy the elf just finished
#     :param start_minute: minute work started
#     :param duration: duration of work, in minutes
#     :return: void
update_next_available_minute(elf_list, hrs, start_minute, duration)
update_productivity(hrs, start_minute, int(elf_list, ceiling(toy$duration / elf_list$rating)))
}
source('hours.R')
load('data/toys_rev1.RData')
source("hours.R")
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
gc(); rm(list=ls())
load('data/toys_rev1.RData')
source("hours.R")
source("hours.R")
hours_init <- data.frame(
hours_per_day = 10, # 10 hour day: 9 - 19
day_start = 9 * 60,
day_end = (9 + hours_per_day) * 60,
minutes_in_24h = 24 * 60
)
source('hours.R')
hours_per_day <- 10 # 10 hour day: 9 - 19
day_start <- 9 * 60
day_end <- (9 + hours_per_day) * 60
minutes_in_24h <- 24 * 60
hours_init <- data.frame(
hours_per_day = hours_per_day, # 10 hour day: 9 - 19
day_start = day_start,
day_end = day_end,
minutes_in_24h = minutes_in_24h
)
convert_to_minute <- function(arrival){
#     Converts the arrival time string to minutes since the reference start time,
#     Jan 1, 2014 at 00:00 (aka, midnight Dec 31, 2013)
#     :param arrival: string in format '2014 12 17 7 03' for Dec 17, 2014 at 7:03 am
#     :return: integer (minutes since arrival time)
time = strsplit(x = arrival, split = ' ')
time1 = paste(paste(time[[1]][1],time[[1]][2],time[[1]][3],sep = '/'),paste(time[[1]][4],time[[1]][5],sep = ":"),sep = " ")
time1 = strftime(time1, "%Y-%m-%d %H:%M:%OS")
time2 = strftime("2014/1/1 0:0", "%Y-%m-%d %H:%M:%OS")
age = as.integer(difftime(time1, time2, units = "mins"))
return(age)
}
source('hours.R')
elf_init <- function(input){
#     Each Elf starts with a rating of 1.0 and are available at 09:00 on Jan 1.
id <- input$elfid
rating <- 1.0
next_available_time <- 540  # Santa's Workshop opens Jan 1, 2014 9:00 (= 540 minutes)
rating_increase <- 1.02
rating_decrease <- 0.90
return(data.frame(id=id, rating=rating, next_available_time=next_available_time,
rating_increase=rating_increase, rating_decrease=rating_decrease))
}
elf_list <- elf_init(elf)
elf <- data.frame(elfid = 1:900)
elf_list <- elf_init(elf)
elf_list
ls()
get_sanctioned_breakdown(hours_init, 12*60, 1000)
get_sanctioned_breakdown(hours_init, 12*60, 1000)$sanctioned
update_next_available_minute <- function(elf_list, hrs, start_minute, duration){
#     Apply the resting time constraint and determine the next minute when the elf can work next.
#     Here, elf can only start work during sanctioned times
#     :param start_minute: time work started on last toy
#     :param duration: duration of work on last toy
#     :return: void
sanctioned <- get_sanctioned_breakdown(hrs, start_minute, duration)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hrs, start_minute, duration)$unsanctioned
# enforce resting time based on the end_minute and the unsanctioned minutes that
# need to be accounted for.
end_minute <- start_minute + duration
if (unsanctioned == 0 ){
if (is_sanctioned_time(hrs, end_minute)){
elf_list$next_available_time <- end_minute
}else{
elf_list$next_available_time <- next_sanctioned_minute(hrs, end_minute)
}
}else{
elf_list$next_available_time <- apply_resting_period(hrs, end_minute, unsanctioned)
}
}
update_next_available_minute(elf_list, hrs, start_minute, duration)
hrs
update_next_available_minute(elf_list, 2, 1021, 123)
update_next_available_minute(elf_list[1,], 2, 1021, 123)
hours_init$minutes_in_24h
hours_per_day <- 10 # 10 hour day: 9 - 19
day_start <- 9 * 60
day_end <- (9 + hours_per_day) * 60
minutes_in_24h <- 24 * 60
hours_init <- data.frame(
hours_per_day = hours_per_day, # 10 hour day: 9 - 19
day_start = day_start,
day_end = day_end,
minutes_in_24h = minutes_in_24h
)
elf_list[1,]
hrs <- 2
start_minute <- 1000
duration <- 100
elf_list <- elf_list[1,]
sanctioned <- get_sanctioned_breakdown(hrs, start_minute, duration)$sanctioned
hrs
start_minute
duration
hours_init
update_next_available_minute <- function(elf_list, hours_init, start_minute, duration){
#     Apply the resting time constraint and determine the next minute when the elf can work next.
#     Here, elf can only start work during sanctioned times
#     :param start_minute: time work started on last toy
#     :param duration: duration of work on last toy
#     :return: void
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, duration)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, duration)$unsanctioned
# enforce resting time based on the end_minute and the unsanctioned minutes that
# need to be accounted for.
end_minute <- start_minute + duration
if (unsanctioned == 0 ){
if (is_sanctioned_time(hrs, end_minute)){
elf_list$next_available_time <- end_minute
}else{
elf_list$next_available_time <- next_sanctioned_minute(hours_init, end_minute)
}
}else{
elf_list$next_available_time <- apply_resting_period(hours_init, end_minute, unsanctioned)
}
}
update_next_available_minute(elf_list[1,], hours_init, 1021, 123)
elf_list[1,]
update_next_available_minute(elf_list[1,], hours_init, 1021, 123)
elf_list[1,]
update_next_available_minute(elf_list[1,], hours_init, 10221, 123)
elf_list[1,]
update_next_available_minute(elf_list[1,], hours_init, 10221, 2123)
elf_list[1,]
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, duration)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, duration)$unsanctioned
unsanctioned
sanctioned
end_minute <- start_minute + duration
end_minute
if (unsanctioned == 0 ){
if (is_sanctioned_time(hrs, end_minute)){
elf_list$next_available_time <- end_minute
}else{
elf_list$next_available_time <- next_sanctioned_minute(hours_init, end_minute)
}
}else{
elf_list$next_available_time <- apply_resting_period(hours_init, end_minute, unsanctioned)
}
elf_list$next_available_time
elf_list
if (unsanctioned == 0 ){
if (is_sanctioned_time(hrs, end_minute)){
elf_list$next_available_time <- end_minute
}else{
elf_list$next_available_time <- next_sanctioned_minute(hours_init, end_minute)
}
}else{
elf_list$next_available_time <- apply_resting_period(hours_init, end_minute, unsanctioned)
}
elf_list
apply_resting_period(hours_init, end_minute, unsanctioned)
update_productivity <- function(elf_list, hrs, start_minute, toy_required_minutes){
#     Update the elf's productivity rating based on the number of minutes the toy required that were
#     worked during sanctioned and unsanctioned times.
#     max(0.5,
#     min(2.0, previous_rating * (self.rating_increase ** sanctioned_hours) *
#     (self.rating_decrease ** unsanctioned_hours)))
#     :param hrs: hours object
#     :param start_minute: minute work started
#     :param toy_required_minutes: minutes required to build the toy (may be different from minutes elf worked)
#     :return: void
# number of required minutes to build toy worked by elf, broken up by sanctioned and unsanctioned minutes
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$unsanctioned
elf_list$rating <- max(0.25,min(4.0, elf_list$rating * (elf_list$rating_increase ** (sanctioned/60)) *
(elf_list$rating_decrease ** (unsanctioned/60))
))
}
elf_list
update_productivity(elf_list, hours_init, 10221, 2123)
elf_list
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$sanctioned
toy_required_minutes<- 100
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$unsanctioned
unsanctioned
sanctioned
elf_list$rating
elf_list$rating <- max(0.25,min(4.0, elf_list$rating * (elf_list$rating_increase ** (sanctioned/60)) *
(elf_list$rating_decrease ** (unsanctioned/60))
))
elf_list$rating
elf_list
start_minute
start_minute
hrs
hours_init
elf_list
update_productivity <- function(elf_list, hours_init, start_minute, toy_required_minutes){
#     Update the elf's productivity rating based on the number of minutes the toy required that were
#     worked during sanctioned and unsanctioned times.
#     max(0.5,
#     min(2.0, previous_rating * (self.rating_increase ** sanctioned_hours) *
#     (self.rating_decrease ** unsanctioned_hours)))
#     :param hrs: hours object
#     :param start_minute: minute work started
#     :param toy_required_minutes: minutes required to build the toy (may be different from minutes elf worked)
#     :return: void
# number of required minutes to build toy worked by elf, broken up by sanctioned and unsanctioned minutes
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$unsanctioned
elf_list$rating <- max(0.25,min(4.0, elf_list$rating * (elf_list$rating_increase ** (sanctioned/60)) *
(elf_list$rating_decrease ** (unsanctioned/60))
))
}
elf_list
update_productivity(elf_list, hours_init, 1000, 100)
elf_list
hours_init
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$unsanctioned
update_productivity <- function(elf_list, hours_init, start_minute, toy_required_minutes){
#     Update the elf's productivity rating based on the number of minutes the toy required that were
#     worked during sanctioned and unsanctioned times.
#     max(0.5,
#     min(2.0, previous_rating * (self.rating_increase ** sanctioned_hours) *
#     (self.rating_decrease ** unsanctioned_hours)))
#     :param hrs: hours object
#     :param start_minute: minute work started
#     :param toy_required_minutes: minutes required to build the toy (may be different from minutes elf worked)
#     :return: void
# number of required minutes to build toy worked by elf, broken up by sanctioned and unsanctioned minutes
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$unsanctioned
elf_list$rating <- max(0.25,min(4.0, elf_list$rating * (elf_list$rating_increase ** (sanctioned/60)) *
(elf_list$rating_decrease ** (unsanctioned/60))
))
return(elf_list)
}
elf_list
update_productivity(elf_list, hours_init, 1000, 100)
elf_list
update_productivity(elf_list, hours_init, 1000, 100)
elf_list
elf_list <- update_productivity(elf_list, hours_init, 1000, 100)
elf_list
elf_list <- update_productivity(elf_list, hours_init, 1000, 100)
elf_list
update_next_available_minute <- function(elf_list, hours_init, start_minute, duration){
#     Apply the resting time constraint and determine the next minute when the elf can work next.
#     Here, elf can only start work during sanctioned times
#     :param start_minute: time work started on last toy
#     :param duration: duration of work on last toy
#     :return: void
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, duration)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, duration)$unsanctioned
# enforce resting time based on the end_minute and the unsanctioned minutes that
# need to be accounted for.
end_minute <- start_minute + duration
if (unsanctioned == 0 ){
if (is_sanctioned_time(hrs, end_minute)){
elf_list$next_available_time <- end_minute
}else{
elf_list$next_available_time <- next_sanctioned_minute(hours_init, end_minute)
}
}else{
elf_list$next_available_time <- apply_resting_period(hours_init, end_minute, unsanctioned)
}
return (elf_list)
}
update_next_available_minute(elf_list[1,], hours_init, 10221, 2123)
update_next_available_minute(elf_list[1,], hours_init, 10221, 2123)
elf_list <- update_next_available_minute(elf_list[1,], hours_init, 10221, 2123)
elf_list
elf_list <- update_next_available_minute(elf_list[1,], hours_init, 10221, 2123)
elf_list
elf_list <- update_next_available_minute(elf_list[1,], hours_init, 1221, 223)
elf_list
source('hours.R')
######################
### Init Parameter ###
######################
elf_init <- function(input){
#     Each Elf starts with a rating of 1.0 and are available at 09:00 on Jan 1.
id <- input$elfid
rating <- 1.0
next_available_time <- 540  # Santa's Workshop opens Jan 1, 2014 9:00 (= 540 minutes)
rating_increase <- 1.02
rating_decrease <- 0.90
return(data.frame(id=id, rating=rating, next_available_time=next_available_time,
rating_increase=rating_increase, rating_decrease=rating_decrease))
}
# elf_list <- elf_init(elf)
##############################
### 更新效率和下次工作时间 ###
##############################
update_elf <- function(elf_list, hrs, toy, start_minute, duration){
#     Updates the elf's productivity rating and next available time based on last toy completed.
#     :param hrs: Hours object for bookkeeping
#     :param toy: Toy object for the toy the elf just finished
#     :param start_minute: minute work started
#     :param duration: duration of work, in minutes
#     :return: void
update_next_available_minute(elf_list, hrs, start_minute, duration)
update_productivity(hrs, start_minute, int(elf_list, ceiling(toy$duration / elf_list$rating)))
}
# update_elf(elf_list, hrs, toy, start_minute, duration)
##########################
### 更新下次可工作时间 ###
##########################
update_next_available_minute <- function(elf_list, hours_init, start_minute, duration){
#     Apply the resting time constraint and determine the next minute when the elf can work next.
#     Here, elf can only start work during sanctioned times
#     :param start_minute: time work started on last toy
#     :param duration: duration of work on last toy
#     :return: void
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, duration)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, duration)$unsanctioned
# enforce resting time based on the end_minute and the unsanctioned minutes that
# need to be accounted for.
end_minute <- start_minute + duration
if (unsanctioned == 0 ){
if (is_sanctioned_time(hrs, end_minute)){
elf_list$next_available_time <- end_minute
}else{
elf_list$next_available_time <- next_sanctioned_minute(hours_init, end_minute)
}
}else{
elf_list$next_available_time <- apply_resting_period(hours_init, end_minute, unsanctioned)
}
return (elf_list)
}
# elf_list <- update_next_available_minute(elf_list[1,], hours_init, 1221, 223)
####################
### 更新工作效率 ###
####################
update_productivity <- function(elf_list, hours_init, start_minute, toy_required_minutes){
#     Update the elf's productivity rating based on the number of minutes the toy required that were
#     worked during sanctioned and unsanctioned times.
#     max(0.5,
#     min(2.0, previous_rating * (self.rating_increase ** sanctioned_hours) *
#     (self.rating_decrease ** unsanctioned_hours)))
#     :param hrs: hours object
#     :param start_minute: minute work started
#     :param toy_required_minutes: minutes required to build the toy (may be different from minutes elf worked)
#     :return: void
# number of required minutes to build toy worked by elf, broken up by sanctioned and unsanctioned minutes
sanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$sanctioned
unsanctioned <- get_sanctioned_breakdown(hours_init, start_minute, toy_required_minutes)$unsanctioned
elf_list$rating <- max(0.25,min(4.0, elf_list$rating * (elf_list$rating_increase ** (sanctioned/60)) *
(elf_list$rating_decrease ** (unsanctioned/60))
))
return(elf_list)
}
# elf_list <- update_productivity(elf_list, hours_init, 1000, 100)
update_elf(elf_list, hrs, toy, start_minute, duration)
update_elf <- function(elf_list, hrs, toy, start_minute, duration){
#     Updates the elf's productivity rating and next available time based on last toy completed.
#     :param hrs: Hours object for bookkeeping
#     :param toy: Toy object for the toy the elf just finished
#     :param start_minute: minute work started
#     :param duration: duration of work, in minutes
#     :return: void
update_next_available_minute(elf_list, hrs, start_minute, duration)
update_productivity(hrs, start_minute, int(elf_list, ceiling(toy$duration / elf_list$rating)))
}
update_elf(elf_list, hours_init, toy, start_minute, duration)
duration
start_minute
toy
update_elf <- function(elf_list, hrs, toy, start_minute, duration){
#     Updates the elf's productivity rating and next available time based on last toy completed.
#     :param hrs: Hours object for bookkeeping
#     :param toy: Toy object for the toy the elf just finished
#     :param start_minute: minute work started
#     :param duration: duration of work, in minutes
#     :return: void
elf_list <- update_next_available_minute(elf_list, hrs, start_minute, duration)
elf_list <- update_productivity(hrs, start_minute, int(elf_list, ceiling(toy$duration / elf_list$rating)))
return(elf_list)
}
update_elf(elf_list, hours_init, toy, start_minute, duration)
