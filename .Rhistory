gc()
gc()
library(doMC)
registerDoMC(cores = 1)
gc()
registerDoMC(cores = NULL)
install.packages(c("AICcmodavg", "deSolve", "Ecfun", "evtree", "highr", "knitr", "mboost", "mime", "minqa", "pcaPP", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "rjags", "rjson", "rmarkdown", "RSQLite", "tis"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv", "nlme"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list=ls(all=TRUE));gc(reset=TRUE);par(mfrow=c(1,1))
contributors()
gc()
gui.classify()
require(stylo)
gui.classify()
gui.oppose()
1906561661/log(901)
convert_to_chardate <- function(arrive_int) {
char_date <- format(reference_time + arrive_int * 60, format = '%Y %m %d %H %M', tz = 'UTC')
return(char_date)
}
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
convert_to_chardate(280232261)
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
load('data/toys.RData')
library(stringr)
library(lubridate)
library(plyr)
# df <- data.frame(DateTime = c("2010-01-01 00:00", "2010-01-01 01:00", "2010-01-01 02:00", "2010-01-01 03:00"))
# df <- mutate(df, DateTime = ymd_hm(DateTime),
#              time  = str_c(hour(DateTime), str_pad(minute(DateTime), 2, side = 'right', pad = '0'), sep = ':'))
### Transform ###
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
toys <- transform(toys, Arrival_time = convert_to_chardate(toys[,'Arrival_time']))
toys <- transform(toys, Arrival_time = as.POSIXct(toys[,'Arrival_time'], '%Y %m %d %H %M', tz = 'UTC'))
toys <- transform(toys, Date = paste(year(toys[,'Arrival_time']), month(toys[,'Arrival_time']), day(toys[,'Arrival_time'])))
toys <- transform(toys, Hour = hour(toys[,'Arrival_time']))
toys <- transform(toys, Time = paste(hour(toys[,'Arrival_time']), minute(toys[,'Arrival_time'])))
toys[toys[,'Hour'] < 9, 'Time'] <- '9 0'
head(toys)
head(toys[toys[,'Duration'] > 600 & toys[,'Time'] != '9 0',])
toys[,'Date'] <- ymd(toys[,'Date'])
head(toys[toys[,'Duration'] > 600 & toys[,'Time'] != '9 0',])
head(toys)
toys[1, 'Date'] + 1
toys[1, 'Date'] + 24 * 3600
head(toys[toys[,'Duration'] > 600 & toys[,'Time'] != '9 0',], 50)
toys[toys[,'Duration'] > 600 & toys[,'Time'] != '9 0', 'Date'] <- toys[toys[,'Duration'] > 600 & toys[,'Time'] != '9 0', 'Date'] + 24*3600
head(toys[toys[,'Duration'] > 600 & toys[,'Time'] != '9 0',], 50)
toys[toys[,'Duration'] > 600 & toys[,'Time'] != '9 0', 'Time'] <- '9 0'
head(toys[toys[,'Duration'] > 600 & toys[,'Time'] != '9 0',], 50)
head(toys)
yead(toys[1,'Date'])
year(toys[1,'Date'])
paste(year(toys[1,'Date']), month(toys[1,'Date']), day(toys[1,'Date']), toys[1,'Time'])
toys <- transform(toys, Arrival_time = paste(year(toys[,'Date']), month(toys[,'Date']), day(toys[,'Date']), toys[,'Time']))
head(toys)
toys <- transform(toys, Date=NULL)
head(toys)
toys <- transform(toys, Hour=NULL);toys <- transform(toys, Time=NULL)
head(toys)
toys <- transform(toys, Arrival_time = convert_to_minute(toys[,'Arrival_time']))
head(toys)
save(toys, file='data/toys_regulated.RData')
load('data/toys.RData')
head(toys)
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900; s_toy <- 100; l_toy <- 720; train_elf <- 0.5; overwork_elf <- 3.9
load('data/toys_regulated.RData')
toys <- data.matrix(transform(toys, Size = 0))
toys[which(toys[,'Duration']<=l_toy),'Size'] <- 2 # Median 19.3%
toys[which(toys[,'Duration']<=s_toy),'Size'] <- 1 # Small 57.5%
toys[which(toys[,'Duration']>l_toy),'Size'] <- 3 # Large 23.2%
save(toys, file='data/toys_classified.RData')
head(toys)
toys <- toys[order(toys[,2]+toys[,3], toys[,2]),]
head(toys)
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys, myelves)
#########################
### Schedule Strategy ###
#########################
assign_elf <- function(myelves, c_toy_size) {
if(sum(myelves[,'score']==c_toy_size)<1) c_toy_size <- 2
if(sum(myelves[,'score']==c_toy_size)<1) c_toy_size <- 1
if(sum(myelves[,'score']==c_toy_size)<1) c_toy_size <- 3
myelves <- myelves[which(myelves[,'score']==c_toy_size),]
if(length(myelves)==4){
assigned_elf <- as.integer(myelves['elf_id'])
}else{
assigned_elf <-as.integer(myelves[which.min(myelves[,'next_available_time']) ,'elf_id'][1])
}
return(assigned_elf)
}
#################
### Main Loop ###
#################
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_toy_size <- myToys[current_toy,'Size']
myelves[which(myelves[,'current_rating']<overwork_elf),'score'] <- 2
myelves[which(myelves[,'current_rating']<=train_elf),'score'] <- 1
myelves[which(myelves[,'current_rating']>=overwork_elf),'score'] <- 3
next_elf <- assign_elf(myelves, c_toy_size)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
submissions <- solution_sortedElf(toys, myelves)
submissions_output <- data.frame(ToyId = as.integer(submissions[,1]),
ElfId = as.integer(submissions[,2]),
StartTime = convert_to_chardate(submissions[,3]),
Duration = as.integer(submissions[,4]), stringsAsFactors = FALSE)
convert_to_minute(submissions_output[nrow(submissions_output),3]) * log(1+NUM_ELVES)
head(toys)
48*60
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
load('data/toys_regulated.RData')
head(toys)
toys <- data.matrix(transform(toys, Size = 0))
head(toys)
toys[which(toys[,'Duration']>toy_break2),'Size'] <- 3 # 1969432 20% - overwork
toys[which(toys[,'Duration']<=toy_break2),'Size'] <- 2 # 52036 0.5% - 48 hour
toys[which(toys[,'Duration']<=toy_break1),'Size'] <- 1 # 52036 0.5% - 48 hour
toys[which(toys[,'Duration']>toy_break2),'Size'] <- 3 # overwork
toy_break1 <- 600; toy_break2 <- 2880
toys <- data.matrix(transform(toys, Size = 0))
head(toys)
toys[which(toys[,'Duration']>toy_break2),'Size'] <- 3 # overwork
toys[which(toys[,'Duration']<=toy_break2),'Size'] <- 2 # 48 hour
toys[which(toys[,'Duration']<=toy_break1),'Size'] <- 1 # 10 hour
head(toys)
train_elf <- 1.0; overwork_elf <- 4.0
system.time(toys[-1,])
system.time(toys[-1,1])
system.time(a <- toys[-1,])
head(myelves)
myelves[,'score'] >0
myelves[,'score'] == 4
length(myelves[,'score'] == 4)
sum(myelves[,'score'] == 4)
sum(myelves[,'score'] != 4)
head(toys)
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
load('data/toys_regulated.RData')
toy_break1 <- 600; toy_break2 <- 2880
toys <- data.matrix(transform(toys, Size = 0))
toys[which(toys[,'Duration']>toy_break2),'Size'] <- 3 # overwork
toys[which(toys[,'Duration']<=toy_break2),'Size'] <- 2 # 48 hour
toys[which(toys[,'Duration']<=toy_break1),'Size'] <- 1 # 10 hour
train_elf <- 1.0; overwork_elf <- 3.9
#########################
### Schedule Strategy ###
#########################
assign_toy <- function(myelves, myToys) {
if(sum(myelves[,'score'] == 3) > 0){
assigned_toy <-as.integer(myToys[myToys[,'Size']==3,'ToyId'][1])
return(assigned_toy)
}else if(sum(myelves[,'score'] == 2) > 0){
assigned_toy <-as.integer(myToys[myToys[,'Size']==2,'ToyId'][1])
return(assigned_toy)
}else{
assigned_toy <-as.integer(myToys[myToys[,'Size']==1,'ToyId'][1])
return(assigned_toy)
}
}
assign_elf <- function(myelves, di, c_toy_size) {
myelves <- myelves[myelves[,'score']==c_toy_size,]
assigned_elf <-as.integer(myelves[order(myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
#################
### Main Loop ###
#################
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
# train_elf <- 1.0; overwork_elf <- 3.9
myelves[myelves[,'current_rating']>overwork_elf,'score'] <- 3
myelves[myelves[,'current_rating']<=overwork_elf,'score'] <- 2
myelves[myelves[,'current_rating']<=train_elf,'score'] <- 1
c_toy_id <- assign_toy(myelves, myToys)
c_toy_arrival <- myToys[c_toy_id, 'Arrival_time']
c_toy_duration <- myToys[c_toy_id,'Duration']
c_toy_size <- myToys[c_toy_id,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
myToys <- myToys[-c_toy_id, ]
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
submissions <- solution_sortedElf(toys, myelves)
system.time(toys[-1,])
system.time(toys[-123,])
submissions <- solution_sortedElf(toys[1:100,], myelves)
submissions <- solution_sortedElf(toys[1,], myelves)
submissions <- solution_sortedElf(toys, myelves)
head(myelves)
myToys <- toys
head(toys)
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
current_toy <- 1
myelves[myelves[,'current_rating']>overwork_elf,'score'] <- 3
myelves[myelves[,'current_rating']<=overwork_elf,'score'] <- 2
myelves[myelves[,'current_rating']<=train_elf,'score'] <- 1
myelves
c_toy_id <- assign_toy(myelves, myToys)
c_toy_id
system.time(assign_toy(myelves, myToys))
system.time(assign_toy(myelves, myToys))
system.time(assign_toy(myelves, myToys))
c_toy_arrival <- myToys[c_toy_id, 'Arrival_time']
c_toy_duration <- myToys[c_toy_id,'Duration']
c_toy_size <- myToys[c_toy_id,'Size']
system.time(next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size))
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
next_elf
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
myToys <- myToys[-c_toy_id, ]
outcomes
head(outcomes)
if(sum(myelves[,'score'] == 3) > 0){
assigned_toy <-as.integer(myToys[myToys[,'Size']==3,'ToyId'][1])
return(assigned_toy)
}else if(sum(myelves[,'score'] == 2) > 0){
assigned_toy <-as.integer(myToys[myToys[,'Size']==2,'ToyId'][1])
return(assigned_toy)
}else{
assigned_toy <-as.integer(myToys[myToys[,'Size']==1,'ToyId'][1])
return(assigned_toy)
}
if(sum(myelves[,'score'] == 3) > 0){
assigned_toy <-as.integer(myToys[myToys[,'Size']==3,'ToyId'][1])
}
system.time(c_toy_id <- assign_toy(myelves, myToys))
head(toys)
system.time(toys[1,])
system.time(toys[toys[,'Duration'=12],])
system.time(toys[toys[,'Duration']==12,])
system.time(toys[toys[,'Size']==1,])
test_dat <- toys
system.time(d <- test_dat[,'Duration'] * (1-test_dat[,'finished']))
head(test_dat)
system.time(d <- test_dat[,'Duration'] * (1-test_dat[,'Arrival_time']))
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
gc(); rm(list=ls())
source('R code/Functions.R')
load('data/toys_regulated.RData')
######################
### Init Parameter ###
######################
hours_per_day <- 10
day_start <- 9 * 60
day_end <- (9 + hours_per_day) * 60
minutes_in_24h <- 24 * 60
reference_time <- as.POSIXct('2014 1 1 0 0', '%Y %m %d %H %M', tz = 'UTC')
rating_increase <- 1.02
rating_decrease <- 0.90
#############
### Hours ###
#############
convert_to_minute <- function(arrival) {
arrive_time <- as.POSIXct(arrival, '%Y %m %d %H %M', tz = 'UTC')
age <- as.integer(difftime(arrive_time, reference_time, units = 'mins', tz = 'UTC'))
return(age)
}
convert_to_chardate <- function(arrive_int) {
char_date <- format(reference_time + arrive_int * 60, format = '%Y %m %d %H %M', tz = 'UTC')
return(char_date)
}
is_sanctioned_time <- function(minute) {
is_sanctioned <- ((minute - day_start) %% minutes_in_24h) < (hours_per_day * 60)
return(is_sanctioned)
}
get_sanctioned_breakdown <- function(start_minute, work_duration) {
full_days <- as.integer(work_duration / minutes_in_24h)
sanctioned <- full_days * hours_per_day * 60
unsanctioned <- full_days * (24 - hours_per_day) * 60
remainder_start <- start_minute + full_days * minutes_in_24h
remainder_end <- start_minute + work_duration - 1 # to avoid off-by-one per R iterator
if(remainder_end >= remainder_start) {
sanctioned <- sanctioned + sum(is_sanctioned_time(remainder_start:remainder_end))
unsanctioned <- unsanctioned + sum(!is_sanctioned_time(remainder_start:remainder_end))
}
return(c(sanctioned, unsanctioned))
}
next_sanctioned_minute <- function(minute) {
if(is_sanctioned_time(minute) && is_sanctioned_time(minute + 1)) {
next_min <- minute + 1
} else {
num_days <- as.integer(minute / minutes_in_24h)
am_or_pm <- as.integer(((minute %% minutes_in_24h)/day_start))
next_min <- day_start + (num_days + am_or_pm / 2) * minutes_in_24h
}
return(next_min)
}
apply_resting_period <- function(start, num_unsanctioned){
num_days_since_jan1 <- as.integer(start / minutes_in_24h)
rest_time <- num_unsanctioned
rest_time_in_working_days <- as.integer(rest_time / (60 * hours_per_day))
rest_time_remaining_minutes <- rest_time %% (60 * hours_per_day)
local_start <- start %% minutes_in_24h
if(local_start < day_start){
local_start <- day_start
}else if(local_start > day_end){
num_days_since_jan1 <- num_days_since_jan1 + 1
local_start <- day_start
}
if((local_start + rest_time_remaining_minutes) > day_end){
rest_time_in_working_days <- rest_time_in_working_days + 1
rest_time_remaining_minutes <- rest_time_remaining_minutes - (day_end - local_start)
local_start <- day_start
}
total_days <- num_days_since_jan1 + rest_time_in_working_days
return (total_days * minutes_in_24h + local_start + rest_time_remaining_minutes)
}
###########
### Elf ###
###########
create_elves <- function(num_elves){
# col_names <- c('elf_id', 'current_rating', 'next_available_time')
col_names <- c('elf_id', 'current_rating', 'next_available_time','score')
elf_mat <- matrix(0, nrow = num_elves, ncol = length(col_names), dimnames = list(NULL,col_names))
elf_mat[,'elf_id'] <- seq_len(num_elves)
elf_mat[,'current_rating'] <- 1.0
elf_mat[,'next_available_time'] <- 540
elf_mat[,'score'] <- 0
return(elf_mat)
}
update_next_available_minute <- function(start_minute, work_duration) {
sanctioned_breakdown <- get_sanctioned_breakdown(start_minute, work_duration)
sanc_time <- sanctioned_breakdown[1]
unsanc_time <- sanctioned_breakdown[2]
end_minute <- start_minute + work_duration
if(unsanc_time == 0) {
if(is_sanctioned_time(end_minute)) {
next_available_time <- end_minute
} else {
next_available_time <- next_sanctioned_minute(end_minute)
}
} else {
next_available_time <- apply_resting_period(end_minute, unsanc_time)
}
return(next_available_time)
}
update_productivity <- function(start_minute, work_duration, current_rating) {
sanctioned_breakdown <- get_sanctioned_breakdown(start_minute, work_duration)
sanc_time <- sanctioned_breakdown[1]
unsanc_time <- sanctioned_breakdown[2]
new_rating <- max(c(0.25, min(c(4.0, current_rating * (rating_increase ** (sanc_time/60)) * (rating_decrease ** (unsanc_time/60))))))
return(new_rating)
}
###########
### Toy ###
###########
toy_init <- function(toys){
toys[,'Arrival_time'] <- convert_to_minute(toys[,'Arrival_time'])
toys <- data.matrix(toys)
return(toys)
}
################
### Solution ###
################
assign_elf <- function(elves) {
assigned_elf <-as.integer(elves[which.min(elves[,'next_available_time']),'elf_id'][1])
return(assigned_elf)
}
# assign_elf <- function(elves) {
#     assigned_elf <-as.integer(elves[order(elves[,'next_available_time'], -elves[,'current_rating']),'elf_id'][1])
#     return(assigned_elf)
# }
# elf_cost <- function(c_toy_arrival, c_toy_duration, myelves){
#     comp1 <- ceiling(c_toy_duration/myelves[, 'current_rating'])
# #     comp2 <- (1 + ifelse(myelves[, 'next_available_time']==540,
# #                          log(sum(myelves[, 'next_available_time']==540)), log(sum(myelves[, 'next_available_time']==540)+1)))
#     comp3 <- myelves[, 'next_available_time'] / c_toy_arrival
#     comp3[which(comp3<1)] <- 1
#     cost <-  comp1 * comp3
#     return(cost)
# }
#
# assign_elf <- function(c_toy_arrival, c_toy_duration, myelves) {
#     myelves[,'score'] <- elf_cost(c_toy_arrival, c_toy_duration, myelves)
#     assigned_elf <-as.integer(myelves[which.min(myelves[,'score']),'elf_id'][1])
#     return(assigned_elf)
# }
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(myelves)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
setwd('/Users/ivan/Work_directory/FICO/Helping-Santas-Helpers/')
NUM_ELVES <- 900
load('data/toys_regulated.RData')
myelves <- create_elves(NUM_ELVES)
submissions <- solution_sortedElf(toys, myelves)
