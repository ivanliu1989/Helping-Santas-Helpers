else {
int num_days = end_minute / (60*24);
int am_or_pm = (end_minute % (60*24))/ 540;
next_min = 540 + (num_days + am_or_pm / 2) * (60*24);
}
int next_available_time = next_min;
}
}
int num_days_since_jan1 = end_minute / (60 * 24);
int rest_time = unsanc_time;
int rest_time_in_working_days = rest_time / 600;
int rest_time_remaining_minutes = rest_time % 600;
int local_start = end_minute % (60 * 24);
if (local_start < 540) local_start = 540;
else if (local_start > 1140) {
num_days_since_jan1 += 1;
local_start = 540;
}
if (local_start + rest_time_remaining_minutes > 1140) {
num_days_since_jan1 += 1;
rest_time_remaining_minutes -= (1140 - local_start);
local_start = 540;
}
int total_days = num_days_since_jan1 + rest_time_in_working_days;
int next_available_time = total_days * (60*24) + local_start + rest_time_remaining_minutes;
}
return next_available_time;
}')
cppFunction('int updateNextAvailableMinute(int start_minute, int work_duration){
int next_available_time = 0;
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
int sanc_time = S;
int unsanc_time = U;
int end_minute = start_minute + work_duration;
if(unsanc_time == 0) {
if(((end_minute - 540) % (60*24)) < 600) {
next_available_time = end_minute;
} else {
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
bool isSanctionedTime_1 = ((end_minute - 539) % (60*24)) < 600;
int next_min = 0;
if(isSanctionedTime && isSanctionedTime_1) next_min = end_minute + 1;
else {
int num_days = end_minute / (60*24);
int am_or_pm = (end_minute % (60*24))/ 540;
next_min = 540 + (num_days + am_or_pm / 2) * (60*24);
}
next_available_time = next_min;
}
} else {
if (unsanc_time == 0) {
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
if (isSanctionedTime) next_available_time = end_minute;
else{
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
bool isSanctionedTime_1 = ((end_minute - 539) % (60*24)) < 600;
int next_min = 0;
if(isSanctionedTime && isSanctionedTime_1) next_min = end_minute + 1;
else {
int num_days = end_minute / (60*24);
int am_or_pm = (end_minute % (60*24))/ 540;
next_min = 540 + (num_days + am_or_pm / 2) * (60*24);
}
next_available_time = next_min;
}
}
int num_days_since_jan1 = end_minute / (60 * 24);
int rest_time = unsanc_time;
int rest_time_in_working_days = rest_time / 600;
int rest_time_remaining_minutes = rest_time % 600;
int local_start = end_minute % (60 * 24);
if (local_start < 540) local_start = 540;
else if (local_start > 1140) {
num_days_since_jan1 += 1;
local_start = 540;
}
if (local_start + rest_time_remaining_minutes > 1140) {
num_days_since_jan1 += 1;
rest_time_remaining_minutes -= (1140 - local_start);
local_start = 540;
}
int total_days = num_days_since_jan1 + rest_time_in_working_days;
next_available_time = total_days * (60*24) + local_start + rest_time_remaining_minutes;
}
return next_available_time;
}')
cppFunction('int updateNextAvailableMinute(int start_minute, int work_duration){
int next_available_time = 0;
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
int end_minute = start_minute + work_duration;
if(U == 0) {
if(((end_minute - 540) % (60*24)) < 600) {
next_available_time = end_minute;
} else {
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
bool isSanctionedTime_1 = ((end_minute - 539) % (60*24)) < 600;
int next_min = 0;
if(isSanctionedTime && isSanctionedTime_1) next_min = end_minute + 1;
else {
int num_days = end_minute / (60*24);
int am_or_pm = (end_minute % (60*24))/ 540;
next_min = 540 + (num_days + am_or_pm / 2) * (60*24);
}
next_available_time = next_min;
}
} else {
if (U == 0) {
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
if (isSanctionedTime) next_available_time = end_minute;
else{
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
bool isSanctionedTime_1 = ((end_minute - 539) % (60*24)) < 600;
int next_min = 0;
if(isSanctionedTime && isSanctionedTime_1) next_min = end_minute + 1;
else {
int num_days = end_minute / (60*24);
int am_or_pm = (end_minute % (60*24))/ 540;
next_min = 540 + (num_days + am_or_pm / 2) * (60*24);
}
next_available_time = next_min;
}
}
int num_days_since_jan1 = end_minute / (60 * 24);
int rest_time = unsanc_time;
int rest_time_in_working_days = rest_time / 600;
int rest_time_remaining_minutes = rest_time % 600;
int local_start = end_minute % (60 * 24);
if (local_start < 540) local_start = 540;
else if (local_start > 1140) {
num_days_since_jan1 += 1;
local_start = 540;
}
if (local_start + rest_time_remaining_minutes > 1140) {
num_days_since_jan1 += 1;
rest_time_remaining_minutes -= (1140 - local_start);
local_start = 540;
}
int total_days = num_days_since_jan1 + rest_time_in_working_days;
next_available_time = total_days * (60*24) + local_start + rest_time_remaining_minutes;
}
return next_available_time;
}')
cppFunction('int updateNextAvailableMinute(int start_minute, int work_duration){
int next_available_time = 0;
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
int end_minute = start_minute + work_duration;
if(U == 0) {
if(((end_minute - 540) % (60*24)) < 600) {
next_available_time = end_minute;
} else {
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
bool isSanctionedTime_1 = ((end_minute - 539) % (60*24)) < 600;
int next_min = 0;
if(isSanctionedTime && isSanctionedTime_1) next_min = end_minute + 1;
else {
int num_days = end_minute / (60*24);
int am_or_pm = (end_minute % (60*24))/ 540;
next_min = 540 + (num_days + am_or_pm / 2) * (60*24);
}
next_available_time = next_min;
}
} else {
if (U == 0) {
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
if (isSanctionedTime) next_available_time = end_minute;
else{
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
bool isSanctionedTime_1 = ((end_minute - 539) % (60*24)) < 600;
int next_min = 0;
if(isSanctionedTime && isSanctionedTime_1) next_min = end_minute + 1;
else {
int num_days = end_minute / (60*24);
int am_or_pm = (end_minute % (60*24))/ 540;
next_min = 540 + (num_days + am_or_pm / 2) * (60*24);
}
next_available_time = next_min;
}
}
int num_days_since_jan1 = end_minute / (60 * 24);
int rest_time = U;
int rest_time_in_working_days = rest_time / 600;
int rest_time_remaining_minutes = rest_time % 600;
int local_start = end_minute % (60 * 24);
if (local_start < 540) local_start = 540;
else if (local_start > 1140) {
num_days_since_jan1 += 1;
local_start = 540;
}
if (local_start + rest_time_remaining_minutes > 1140) {
num_days_since_jan1 += 1;
rest_time_remaining_minutes -= (1140 - local_start);
local_start = 540;
}
int total_days = num_days_since_jan1 + rest_time_in_working_days;
next_available_time = total_days * (60*24) + local_start + rest_time_remaining_minutes;
}
return next_available_time;
}')
updateNextAvailableMinute(123,4532)
update_next_available_minute(123,4532)
updateNextAvailableMinute(1233,4532)
update_next_available_minute(1233,4532)
update_next_available_minute(1233,32)
updateNextAvailableMinute(1233,32)
system.time(updateNextAvailableMinute(1233,32))
system.time(update_next_available_minute(1233,32))
system.time(update_next_available_minute(1233,32452))
system.time(updateNextAvailableMinute(1233,32452))
update_productivity(123,2000,4)
update_productivity(123,2000.213,4)
cppFunction('double update_productivity(int start_minute, int work_duration, double current_rating){
NumericVector out(2);
int S = 0;
int U = 0;
int full_days = duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = startMinute + full_days * (60*24);
for (int i = remainder; i < (startMinute+duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
new_rating = max(0.25, min(4.0, current_rating * pow(1.02, S / 60.0) * pow(0.90, U / 60.0)));
return new_rating;
}')
cppFunction('double update_productivity(int start_minute, int work_duration, double current_rating){
NumericVector out(2);
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
new_rating = max(0.25, min(4.0, current_rating * pow(1.02, S / 60.0) * pow(0.90, U / 60.0)));
return new_rating;
}')
cppFunction('double update_productivity(int start_minute, int work_duration, double current_rating){
NumericVector out(2);
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
new_rating = max(0.25, min(4.0, current_rating * pow(1.02, S / 60.0) * pow(0.90, U / 60.0)));
return new_rating;
}')
cppFunction('double update_productivity(int start_minute, int work_duration, double current_rating){
NumericVector out(2);
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
double new_rating = max(0.25, min(4.0, current_rating * pow(1.02, S / 60.0) * pow(0.90, U / 60.0)));
return new_rating;
}')
cppFunction('double update_productivity(int start_minute, int work_duration, double current_rating){
NumericVector out(2);
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
double new_rating = max(0.25, std::min(4.0, current_rating * pow(1.02, S / 60.0) * pow(0.90, U / 60.0)));
return new_rating;
}')
cppFunction('double update_productivity(int start_minute, int work_duration, double current_rating){
NumericVector out(2);
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
double new_rating = std::max(0.25, std::min(4.0, current_rating * pow(1.02, S / 60.0) * pow(0.90, U / 60.0)));
return new_rating;
}')
update_productivity(1000, 500, 1.2)
update_productivity <- function(start_minute, work_duration, current_rating) {
sanctioned_breakdown <- get_sanctioned_breakdown(start_minute, work_duration)
sanc_time <- sanctioned_breakdown[1]
unsanc_time <- sanctioned_breakdown[2]
new_rating <- max(c(0.25, min(c(4.0, current_rating * (rating_increase ** (sanc_time/60)) * (rating_decrease ** (unsanc_time/60))))))
return(new_rating)
}
cppFunction('double updateProductivity(int start_minute, int work_duration, double current_rating){
NumericVector out(2);
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
double new_rating = std::max(0.25, std::min(4.0, current_rating * pow(1.02, S / 60.0) * pow(0.90, U / 60.0)));
return new_rating;
}')
update_productivity(1000, 500, 1.2)
updateProductivity(1000, 500, 1.2)
updateProductivity(1000, 500, 4)
update_productivity(1000, 500, 4)
update_productivity(1000, 5500, 4)
updateProductivity(1000, 5500, 4)
update_productivity(1000, 1500, 4)
updateProductivity(1000, 1500, 4)
system.time(updateProductivity(1000, 1500, 4))
system.time(update_productivity(1000, 1500, 4))
system.time(update_productivity(10230, 15040, 4))
system.time(updateProductivity(10230, 15040, 4))
require(Rcpp)
cppFunction('int updateNextAvailableMinute(int start_minute, int work_duration){
int next_available_time = 0;
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
int end_minute = start_minute + work_duration;
if(U == 0) {
if(((end_minute - 540) % (60*24)) < 600) {
next_available_time = end_minute;
} else {
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
bool isSanctionedTime_1 = ((end_minute - 539) % (60*24)) < 600;
int next_min = 0;
if(isSanctionedTime && isSanctionedTime_1) next_min = end_minute + 1;
else {
int num_days = end_minute / (60*24);
int am_or_pm = (end_minute % (60*24))/ 540;
next_min = 540 + (num_days + am_or_pm / 2) * (60*24);
}
next_available_time = next_min;
}
} else {
if (U == 0) {
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
if (isSanctionedTime) next_available_time = end_minute;
else{
bool isSanctionedTime = ((end_minute - 540) % (60*24)) < 600;
bool isSanctionedTime_1 = ((end_minute - 539) % (60*24)) < 600;
int next_min = 0;
if(isSanctionedTime && isSanctionedTime_1) next_min = end_minute + 1;
else {
int num_days = end_minute / (60*24);
int am_or_pm = (end_minute % (60*24))/ 540;
next_min = 540 + (num_days + am_or_pm / 2) * (60*24);
}
next_available_time = next_min;
}
}
int num_days_since_jan1 = end_minute / (60 * 24);
int rest_time = U;
int rest_time_in_working_days = rest_time / 600;
int rest_time_remaining_minutes = rest_time % 600;
int local_start = end_minute % (60 * 24);
if (local_start < 540) local_start = 540;
else if (local_start > 1140) {
num_days_since_jan1 += 1;
local_start = 540;
}
if (local_start + rest_time_remaining_minutes > 1140) {
num_days_since_jan1 += 1;
rest_time_remaining_minutes -= (1140 - local_start);
local_start = 540;
}
int total_days = num_days_since_jan1 + rest_time_in_working_days;
next_available_time = total_days * (60*24) + local_start + rest_time_remaining_minutes;
}
return next_available_time;
}')
cppFunction('double updateProductivity(int start_minute, int work_duration, double current_rating){
NumericVector out(2);
int S = 0;
int U = 0;
int full_days = work_duration / (60*24);
S = full_days * (10*60);
U = full_days * (14*60);
int remainder = start_minute + full_days * (60*24);
for (int i = remainder; i < (start_minute+work_duration); ++i) {
bool isSanctionedTime = ((i - 540) % (60*24)) < 600;
if (isSanctionedTime) S += 1;
else U += 1;
}
double new_rating = std::max(0.25, std::min(4.0, current_rating * pow(1.02, S / 60.0) * pow(0.90, U / 60.0)));
return new_rating;
}')
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- updateNextAvailableMinute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- updateProductivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
if(current_toy %% 2000000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return((outcomes[which.max(outcomes[,3]),3]+outcomes[which.max(outcomes[,3]), 4])*log(901))
}
for (c in 1:C){
x1 <- xbest
x1[,'ToyId'] <- sample(x1[,'ToyId']) ## reallocate Toys to a random chosen group of Elves
fx1 <- solution_Elf(myToys, myelves, x1)
delta <- fx1-fbest
if(delta<0){
xbest <- x1; fbest <- fx1
cat(paste('\n -- Find Improvement:',delta, '!!!'))
cat(paste('\n -- Find Global Improvement!!! Current Score:',fbest))
}
}
#################
### Functions ###
#################
### f(x) ###
solution_Elf <- function(myToys, myelves, schedule){
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
myToys <- myToys[schedule[,'ToyId'],]
for(current_toy in 1:nrow(myToys)){
c_toy_id <- myToys[current_toy,'ToyId']
c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
c_elf_id <- schedule[current_toy, 'ElfId']
c_elf_start_time <- myelves[c_elf_id, 'next_available_time']
c_elf_rating <- myelves[c_elf_id, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[c_elf_id, 'next_available_time'] <- updateNextAvailableMinute(c_elf_start_time, work_duration)
myelves[c_elf_id, 'current_rating'] <- updateProductivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration)
if(current_toy %% 2000000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
return((outcomes[which.max(outcomes[,3]),3]+outcomes[which.max(outcomes[,3]), 4])*log(901))
}
