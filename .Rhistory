setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
#gc(); rm(list=ls()); source('R code/Functions.R');
require(Rcpp)
sourceCpp('Latest Stable Models/greedy algorithm/main_greedy_2_2.cpp')
### Segmentation Elf ###
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves_rate <- myelves[,'current_rating']
### main loop ###
submissions <- solution_Elf(toys_0,toys_1,toys_2,toys_3,toys_4,toys_5,toys_6,toys_7,toys_8,
toys_9,toys_10,toys_11,toys_12,toys_13,toys_14,toys_15,toys_16,
toys_17,myelves,myelves_rate)
(submissions[which.max(submissions[,3]),3]+submissions[which.max(submissions[,3]), 4])*log(901)
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
#gc(); rm(list=ls()); source('R code/Functions.R');
require(Rcpp)
sourceCpp('Latest Stable Models/greedy algorithm/main_greedy_3_3.cpp')
### Segmentation Elf ###
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves_rate <- myelves[,'current_rating']
### main loop ###
submissions <- solution_Elf(toys_0,toys_1,toys_2,toys_3,toys_4,toys_5,toys_6,toys_7,toys_8,
toys_9,toys_10,toys_11,toys_12,toys_13,toys_14,toys_15,toys_16,
toys_17,myelves,myelves_rate)
(submissions[which.max(submissions[,3]),3]+submissions[which.max(submissions[,3]), 4])*log(901)
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
#gc(); rm(list=ls()); source('R code/Functions.R');
require(Rcpp)
sourceCpp('Latest Stable Models/greedy algorithm/main_greedy_3_3.cpp')
### Segmentation Elf ###
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves_rate <- myelves[,'current_rating']
### main loop ###
submissions <- solution_Elf(toys_0,toys_1,toys_2,toys_3,toys_4,toys_5,toys_6,toys_7,toys_8,
toys_9,toys_10,toys_11,toys_12,toys_13,toys_14,toys_15,toys_16,
toys_17,myelves,myelves_rate)
(submissions[which.max(submissions[,3]),3]+submissions[which.max(submissions[,3]), 4])*log(901)
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
#gc(); rm(list=ls()); source('R code/Functions.R');
require(Rcpp)
sourceCpp('Latest Stable Models/greedy algorithm/main_greedy_3.cpp')
### Segmentation Elf ###
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves_rate <- myelves[,'current_rating']
### main loop ###
submissions <- solution_Elf(toys_0,toys_1,toys_2,toys_3,toys_4,toys_5,toys_6,toys_7,toys_8,
toys_9,toys_10,toys_11,toys_12,toys_13,toys_14,toys_15,toys_16,
toys_17,myelves,myelves_rate)
(submissions[which.max(submissions[,3]),3]+submissions[which.max(submissions[,3]), 4])*log(901)
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
require(Rcpp)
sourceCpp('Latest Stable Models/greedy algorithm/main_greedy_4.cpp')
### Segmentation Elf ###
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves_rate <- myelves[,'current_rating']
### main loop ###
submissions <- solution_Elf(toys_0,toys_1,toys_2,toys_3,toys_4,toys_5,toys_6,toys_7,toys_8,
toys_9,toys_10,toys_11,toys_12,toys_13,toys_14,toys_15,toys_16,
toys_17,myelves,myelves_rate)
(submissions[which.max(submissions[,3]),3]+submissions[which.max(submissions[,3]), 4])*log(901)
head(submissions)
x_all <- list()
x_all <- list()
for (i in 1:900){
x_all[[i]] <- submissions[which(submissions[,2]==i), 1]
}
x_all[[1]]
save(x_all, file='greedy_algorithm_solution.RData')
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
gc(); rm(list=ls())
load('data/toys.RData'); load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
index_num<-1
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
toys_dat <- data.frame(toys)
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
head(myToys)
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[which.max(outcome_all[,3]), 4])*log(901)
outcome_all <- rbind(outcome_all, outcome)
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[which.max(outcome_all[,3]), 4])*log(901)
schedule <- c(1:nrow(myToys))
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
outcome_all <- rbind(outcome_all, outcome)
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[which.max(outcome_all[,3]), 4])*log(901)
nrow(myToys)
x_all[[index_num]]
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
myToys
head(myToys)
head(schedule)
head(x_all[[1]])
gc(); rm(list=ls())
load('data/toys.RData'); load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
myelves
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
# myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- c(1:nrow(myToys))
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule),'fbest:',f_all[index_num])
}
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
# myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- c(1:nrow(myToys))
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
# myToys <- myToys[order(myToys[,2]+myToys[,3], myToys[,2]),] # ??
schedule <- c(1:nrow(myToys))
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
myToys <- myToys[order(x_all[[index_num]]),] # ??
myToys
gc(); rm(list=ls())
load('data/toys.RData'); load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
myToys <- myToys[order(x_all[[index_num]]),] # ??
schedule <- c(1:nrow(myToys))
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
gc(); rm(list=ls()); source('R code/Functions.R');
# load('data/toys_regulated.RData')
load('data/toys.RData')
### break down toys dataset ###
toys <- data.matrix(toys)
toy_ex1 <- 5760; toy_ex2 <- 12480;
toy_remain <- 2848
toy_retrain1 <- c(140:150); toy_retrain2 <- c(151:183); toy_retrain3 <- c(184:223);
toy_retrain4 <- c(224:272); toy_retrain5 <- c(273:331); toy_retrain6 <- c(332:404); toy_retrain7 <- c(405:492);
toy_train1 <- c(493:610); toy_train2 <- c(611:741); toy_train3 <- c(742:901);
toy_train4 <- c(902:1117); toy_train5 <- c(1118:1335); toy_train6 <- c(1336:1625); toy_train7 <- c(1626:1978);
toys <- data.matrix(transform(toys, Size = 0)) # trival
toys[which(toys[,'Duration']<=toy_remain),'Size'] <- 1 # remain
toys[which(toys[,'Duration']<=min(toy_train7)),'Size'] <- 0 # trival
toys[which(toys[,'Duration']>toy_remain),'Size'] <- 2 # ex1
toys[which(toys[,'Duration']>=toy_ex2),'Size'] <- 3 # ex2
toys[which(toys[,'Duration']%in%toy_retrain1),'Size'] <- 4 # re1
toys[which(toys[,'Duration']%in%toy_retrain2),'Size'] <- 5 # re2
toys[which(toys[,'Duration']%in%toy_retrain3),'Size'] <- 6 # re3
toys[which(toys[,'Duration']%in%toy_retrain4),'Size'] <- 7 # re4
toys[which(toys[,'Duration']%in%toy_retrain5),'Size'] <- 8 # re5
toys[which(toys[,'Duration']%in%toy_retrain6),'Size'] <- 9 # re6
toys[which(toys[,'Duration']%in%toy_retrain7),'Size'] <- 10 # re7
toys[which(toys[,'Duration']%in%toy_train1),'Size'] <- 11 # tr1
toys[which(toys[,'Duration']%in%toy_train2),'Size'] <- 12 # tr2
toys[which(toys[,'Duration']%in%toy_train3),'Size'] <- 13 # tr3
toys[which(toys[,'Duration']%in%toy_train4),'Size'] <- 14 # tr4
toys[which(toys[,'Duration']%in%toy_train5),'Size'] <- 15 # tr5
toys[which(toys[,'Duration']%in%toy_train6),'Size'] <- 16 # tr6
toys[which(toys[,'Duration']%in%toy_train7),'Size'] <- 17 # tr7
#table(toys[,'Size'])
toys_0 <- toys[which(toys[,'Size']==0),]
toys_1 <- toys[which(toys[,'Size']==1),]
toys_2 <- toys[which(toys[,'Size']==2),]
toys_3 <- toys[which(toys[,'Size']==3),]
toys_4 <- toys[which(toys[,'Size']==4),]
toys_5 <- toys[which(toys[,'Size']==5),]
toys_6 <- toys[which(toys[,'Size']==6),]
toys_7 <- toys[which(toys[,'Size']==7),]
toys_8 <- toys[which(toys[,'Size']==8),]
toys_9 <- toys[which(toys[,'Size']==9),]
toys_10 <- toys[which(toys[,'Size']==10),]
toys_11 <- toys[which(toys[,'Size']==11),]
toys_12 <- toys[which(toys[,'Size']==12),]
toys_13 <- toys[which(toys[,'Size']==13),]
toys_14 <- toys[which(toys[,'Size']==14),]
toys_15 <- toys[which(toys[,'Size']==15),]
toys_16 <- toys[which(toys[,'Size']==16),]
toys_17 <- toys[which(toys[,'Size']==17),]
toys_0 <- toys_0[order(toys_0[,'Arrival_time'],toys_0[,'Duration']),]
toys_1 <- toys_1[order(toys_1[,'Arrival_time'],toys_1[,'Duration']),]
toys_2 <- toys_2[order(toys_2[,'Duration']),]
toys_3 <- toys_3[order(toys_3[,'Duration']),]
toys_4 <- toys_4[order(toys_4[,'Arrival_time']),]
toys_5 <- toys_5[order(toys_5[,'Arrival_time']),]
toys_6 <- toys_6[order(toys_6[,'Arrival_time']),]
toys_7 <- toys_7[order(toys_7[,'Arrival_time']),]
toys_8 <- toys_8[order(toys_8[,'Arrival_time']),]
toys_9 <- toys_9[order(toys_9[,'Arrival_time']),]
toys_10 <- toys_10[order(toys_10[,'Arrival_time']),]
toys_11 <- toys_11[order(toys_11[,'Arrival_time']),]
toys_12 <- toys_12[order(toys_12[,'Arrival_time']),]
toys_13 <- toys_13[order(toys_13[,'Arrival_time']),]
toys_14 <- toys_14[order(toys_14[,'Arrival_time']),]
toys_15 <- toys_15[order(toys_15[,'Arrival_time']),]
toys_16 <- toys_16[order(toys_16[,'Arrival_time']),]
toys_17 <- toys_17[order(toys_17[,'Arrival_time']),]
# 7days seperate
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
#gc(); rm(list=ls()); source('R code/Functions.R');
require(Rcpp)
sourceCpp('Latest Stable Models/greedy algorithm/main_greedy_4.cpp')
### Segmentation Elf ###
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves_rate <- myelves[,'current_rating']
### main loop ###
submissions <- solution_Elf(toys_0,toys_1,toys_2,toys_3,toys_4,toys_5,toys_6,toys_7,toys_8,
toys_9,toys_10,toys_11,toys_12,toys_13,toys_14,toys_15,toys_16,
toys_17,myelves,myelves_rate)
(submissions[which.max(submissions[,3]),3]+submissions[which.max(submissions[,3]), 4])*log(901)
submissions[which(submissions[,2]==1), 1]
submissions[which(submissions[,2]==1), ]
head(submissions[which(submissions[,2]==1), ],100)
tail(submissions[which(submissions[,2]==i), 1])
tail(submissions[which(submissions[,2]==1),])
(262813823+89520)*log(901)
gc(); rm(list=ls())
load('data/toys.RData'); load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("R code/c_Functions_GA.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat)#data.matrix(toys_dat[x_all[[index_num]],])
# myToys <- myToys[order(x_all[[index_num]]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat)#data.matrix(toys_dat[x_all[[index_num]],])
# myToys <- myToys[order(x_all[[index_num]]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
library(Rcpp);sourceCpp("R code/c_Functions_GA.cpp")
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat)#data.matrix(toys_dat[x_all[[index_num]],])
# myToys <- myToys[order(x_all[[index_num]]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
dim(myToys)
head(myToys)
head(schedule)
toys_dat[6075,]
toys_dat[15771,]
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
gc(); rm(list=ls()); source('R code/Functions.R');
# load('data/toys_regulated.RData')
load('data/toys.RData')
### break down toys dataset ###
toys <- data.matrix(toys)
toy_ex1 <- 5760; toy_ex2 <- 12480;
toy_remain <- 2848
toy_retrain1 <- c(140:150); toy_retrain2 <- c(151:183); toy_retrain3 <- c(184:223);
toy_retrain4 <- c(224:272); toy_retrain5 <- c(273:331); toy_retrain6 <- c(332:404); toy_retrain7 <- c(405:492);
toy_train1 <- c(493:610); toy_train2 <- c(611:741); toy_train3 <- c(742:901);
toy_train4 <- c(902:1117); toy_train5 <- c(1118:1335); toy_train6 <- c(1336:1625); toy_train7 <- c(1626:1978);
toys <- data.matrix(transform(toys, Size = 0)) # trival
toys[which(toys[,'Duration']<=toy_remain),'Size'] <- 1 # remain
toys[which(toys[,'Duration']<=min(toy_train7)),'Size'] <- 0 # trival
toys[which(toys[,'Duration']>toy_remain),'Size'] <- 2 # ex1
toys[which(toys[,'Duration']>=toy_ex2),'Size'] <- 3 # ex2
toys[which(toys[,'Duration']%in%toy_retrain1),'Size'] <- 4 # re1
toys[which(toys[,'Duration']%in%toy_retrain2),'Size'] <- 5 # re2
toys[which(toys[,'Duration']%in%toy_retrain3),'Size'] <- 6 # re3
toys[which(toys[,'Duration']%in%toy_retrain4),'Size'] <- 7 # re4
toys[which(toys[,'Duration']%in%toy_retrain5),'Size'] <- 8 # re5
toys[which(toys[,'Duration']%in%toy_retrain6),'Size'] <- 9 # re6
toys[which(toys[,'Duration']%in%toy_retrain7),'Size'] <- 10 # re7
toys[which(toys[,'Duration']%in%toy_train1),'Size'] <- 11 # tr1
toys[which(toys[,'Duration']%in%toy_train2),'Size'] <- 12 # tr2
toys[which(toys[,'Duration']%in%toy_train3),'Size'] <- 13 # tr3
toys[which(toys[,'Duration']%in%toy_train4),'Size'] <- 14 # tr4
toys[which(toys[,'Duration']%in%toy_train5),'Size'] <- 15 # tr5
toys[which(toys[,'Duration']%in%toy_train6),'Size'] <- 16 # tr6
toys[which(toys[,'Duration']%in%toy_train7),'Size'] <- 17 # tr7
#table(toys[,'Size'])
toys_0 <- toys[which(toys[,'Size']==0),]
toys_1 <- toys[which(toys[,'Size']==1),]
toys_2 <- toys[which(toys[,'Size']==2),]
toys_3 <- toys[which(toys[,'Size']==3),]
toys_4 <- toys[which(toys[,'Size']==4),]
toys_5 <- toys[which(toys[,'Size']==5),]
toys_6 <- toys[which(toys[,'Size']==6),]
toys_7 <- toys[which(toys[,'Size']==7),]
toys_8 <- toys[which(toys[,'Size']==8),]
toys_9 <- toys[which(toys[,'Size']==9),]
toys_10 <- toys[which(toys[,'Size']==10),]
toys_11 <- toys[which(toys[,'Size']==11),]
toys_12 <- toys[which(toys[,'Size']==12),]
toys_13 <- toys[which(toys[,'Size']==13),]
toys_14 <- toys[which(toys[,'Size']==14),]
toys_15 <- toys[which(toys[,'Size']==15),]
toys_16 <- toys[which(toys[,'Size']==16),]
toys_17 <- toys[which(toys[,'Size']==17),]
toys_0 <- toys_0[order(toys_0[,'Arrival_time'],toys_0[,'Duration']),]
toys_1 <- toys_1[order(toys_1[,'Arrival_time'],toys_1[,'Duration']),]
toys_2 <- toys_2[order(toys_2[,'Duration']),]
toys_3 <- toys_3[order(toys_3[,'Duration']),]
toys_4 <- toys_4[order(toys_4[,'Arrival_time']),]
toys_5 <- toys_5[order(toys_5[,'Arrival_time']),]
toys_6 <- toys_6[order(toys_6[,'Arrival_time']),]
toys_7 <- toys_7[order(toys_7[,'Arrival_time']),]
toys_8 <- toys_8[order(toys_8[,'Arrival_time']),]
toys_9 <- toys_9[order(toys_9[,'Arrival_time']),]
toys_10 <- toys_10[order(toys_10[,'Arrival_time']),]
toys_11 <- toys_11[order(toys_11[,'Arrival_time']),]
toys_12 <- toys_12[order(toys_12[,'Arrival_time']),]
toys_13 <- toys_13[order(toys_13[,'Arrival_time']),]
toys_14 <- toys_14[order(toys_14[,'Arrival_time']),]
toys_15 <- toys_15[order(toys_15[,'Arrival_time']),]
toys_16 <- toys_16[order(toys_16[,'Arrival_time']),]
toys_17 <- toys_17[order(toys_17[,'Arrival_time']),]
# 7days seperate
setwd('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/FICO/Helping-Santas-Helpers')
#gc(); rm(list=ls()); source('R code/Functions.R');
require(Rcpp)
sourceCpp('Latest Stable Models/greedy algorithm/main_greedy_4.cpp')
### Segmentation Elf ###
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
myelves_rate <- myelves[,'current_rating']
### main loop ###
submissions <- solution_Elf(toys_0,toys_1,toys_2,toys_3,toys_4,toys_5,toys_6,toys_7,toys_8,
toys_9,toys_10,toys_11,toys_12,toys_13,toys_14,toys_15,toys_16,
toys_17,myelves,myelves_rate)
(submissions[which.max(submissions[,3]),3]+submissions[which.max(submissions[,3]), 4])*log(901)
x_all <- list()
for (i in 1:900){
x_all[[i]] <- submissions[which(submissions[,2]==i), 1]
}
save(x_all, file='Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData')
load('data/toys.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat)#data.matrix(toys_dat[x_all[[index_num]],])
# myToys <- myToys[order(x_all[[index_num]]),] # ??
schedule <- x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
gc(); rm(list=ls())
load('data/toys.RData'); load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
myToys <- myToys[order(x_all[[index_num]]),] # ??
schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
gc(); rm(list=ls())
load('data/toys.RData'); load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
myToys <- myToys[order(x_all[[index_num]]),] # ??
schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
dim(outcome_all); head(outcome_all);
length(table(outcome_all[,1])); length(table(outcome_all[,2]))
(outcome_all[which.max(outcome_all[,3]),3]+outcome_all[which.max(outcome_all[,3]), 4])*log(901)
gc(); rm(list=ls())
load('data/toys.RData'); load('Latest Stable Models/simulated_annealing/greedy_algorithm_solution.RData');
source('R code/Functions.R');source('R code/c_Functions.r')
library(Rcpp);sourceCpp("Latest Stable Models/simulated_annealing/c_Functions_GA.cpp")
toys_dat <- data.frame(toys)
outcome_all <- matrix(0, nrow = 0, ncol = 4,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration')))
#load('simulated_annealing_1_900.RData')
NUM_ELVES <- 1
myelves <- create_elves(NUM_ELVES)
for (index_num in 1:900){
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
myToys <- myToys[order(x_all[[index_num]]),] # ??
schedule <- c(1:nrow(myToys)) #x_all[[index_num]]
outcome <- solution_Elf_submit_c(myToys, myelves, schedule)
outcome_all <- rbind(outcome_all, outcome)
cat('\nsuccess! no:', index_num, 'score:', solution_Elf_c(myToys, myelves, schedule))#,'fbest:',f_all[index_num])
}
head(outcome_all)
a <- which(outcome_all$ElfId == 1)
a <- which(outcome_all[,'ElfId'] == 1)
dim(a)
head(a)
length(a)
length(x_all[[1]])
a <- outcome_all[which(outcome_all[,'ElfId'] == 1),]
length(a)
dim(a)
head(a)
identical(x_all[[1]], a[,2])
x_all[[1]] - a[,2]
x_all[[1]] - a[,2]
test <- cbind(x_all[[1]], a[,2])
head(test)
a[,2]
test <- cbind(x_all[[1]], a[,1])
head(test)
identical(x_all[[1]], a[,1])
index_num <- 1
myelves[,'elf_id'] <- index_num
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
myToys <- myToys[order(x_all[[index_num]]),] # ??
head(myToys)
myToys <- myToys[sort(x_all[[index_num]]),] # ??
myToys <- data.matrix(toys_dat[x_all[[index_num]],])
myToys <- myToys[sort(x_all[[index_num]]),] # ??
myToys <- myToys[(x_all[[index_num]]),] # ??
dim(myToys)
myToys <- myToys[sort(x_all[[index_num]]),] # ??
myToys <- myToys[order(x_all[[index_num]]),] # ??
order(x_all[[index_num]])
myToys <- myToys[order(x_all[[index_num]]),] # ??
head(x_all[[index_num]])
head(myToys)
myToys <- myToys[order(x_all[[index_num]]),] # ??
head(myToys)
