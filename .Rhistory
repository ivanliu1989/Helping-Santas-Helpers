c_toy_arrival <- myToys[current_toy, 'Arrival_time']
c_toy_duration <- myToys[current_toy,'Duration']
next_elf <- assign_elf(myelves, c_toy_duration)
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[current_toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(current_toy %% 100000 == 0) cat('\nCompleted', current_toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(myelves)
}
submissions <- solution_sortedElf(toys[1:10000,], myelves)
submissions
c_toy_duration <- 20000
next_elf <- assign_elf(myelves, c_toy_duration)
next_elf
head(myelves)
next_elf <- assign_elf(submissions, c_toy_duration)
next_elf
submissions
myelves <- submissions
a <- myelves[,'current_rating']
head(myelves)
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
head(myelves)
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
di <- c_toy_duration
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
head(myelves)
myelves
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
head(myelves)
myelves
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves
myelves
di<-100
di < -1440*log(4*a)/(log(1.02)+log(0.9))
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves
di < a * 600
di
di <- 10000
di < a * 600
myelves
myelves[di < a * 600 ,'score']
myelves[di < a * 600 ,'score'] <- 0
myelves
assign_elf <- function(myelves, di) {
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves[di < a * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
myelves
c_toy_duration
assign_elf(myelves, c_toy_duration)
assign_elf(myelves, 100)
assign_elf(myelves, 100000)
assign_elf(myelves, 600)
assign_elf(myelves, 0)
assign_elf(myelves, 100)
di
di <- 100
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves[di < a * 600 ,'score'] <- 0 # < 600 * a
myelves
1440*log(4*a)/(log(1.02)+log(0.9))
di <- 5000
di < -1440*log(4*a)/(log(1.02)+log(0.9))
di < a * 600
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves[di < a * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
assigned_elf
myelves
myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id']
myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,]
di
-1440*log(4*a)/(log(1.02)+log(0.9))
a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1)
myelves
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,]'elf_id'][1])
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
assigned_elf
myelves[444,]
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
load('data/toys_classified.RData')
toy_break1 <- 2.5*60; toy_break2 <- 10*60; toy_break3 <- 40*60; toy_break4<- 48*60; exhaustion <- 208*60
toys <- data.matrix(transform(toys, Exhaustion = 0))
toys[which(toys[,'Duration']>=toy_break4),'Size'] <- 5 # 1969432 20% - overwork
toys[which(toys[,'Duration']<toy_break4),'Size'] <- 4 # 52036 0.5% - 48 hour
toys[which(toys[,'Duration']<toy_break3),'Size'] <- 3 # 366753 3.7% - 40 hour
toys[which(toys[,'Duration']<toy_break2),'Size'] <- 2 # 1202851 12% - 10 hour
toys[which(toys[,'Duration']<toy_break1),'Size'] <- 1 # 6408928 64% - 2.5 hour
toys[which(toys[,'Duration']>=exhaustion),'Exhaustion'] <- 1 # 995590 10% larger than 208 hours
toys[which(toys[,'Duration']<exhaustion),'Exhaustion'] <- 0 # 9004410 90% 208 hour
toys <- toys[order(toys[,'Exhaustion'], toys[,'Arrival_time']),]
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
load('data/toys_classified.RData')
toy_break1 <- 2.5*60; toy_break2 <- 10*60; toy_break3 <- 40*60; toy_break4<- 48*60; exhaustion <- 208*60
toys <- data.matrix(transform(toys, Exhaustion = 0))
toys[which(toys[,'Duration']>=toy_break4),'Size'] <- 5 # 1969432 20% - overwork
toys[which(toys[,'Duration']<toy_break4),'Size'] <- 4 # 52036 0.5% - 48 hour
toys[which(toys[,'Duration']<toy_break3),'Size'] <- 3 # 366753 3.7% - 40 hour
toys[which(toys[,'Duration']<toy_break2),'Size'] <- 2 # 1202851 12% - 10 hour
toys[which(toys[,'Duration']<toy_break1),'Size'] <- 1 # 6408928 64% - 2.5 hour
toys[which(toys[,'Duration']>=exhaustion),'Exhaustion'] <- 1 # 995590 10% larger than 208 hours
toys[which(toys[,'Duration']<exhaustion),'Exhaustion'] <- 0 # 9004410 90% 208 hour
head(toys)
head(myelves)
di
retrain_elf <- 1; train_elf <- 2.5; overwork_elf <- 3.9
myelves
myelves[,'score'] <- 5
myelves[which(myelves[,'score']<overwork_elf),'score'] <- 4
myelves[which(myelves[,'score']<train_elf),'score'] <- 2
myelves[which(myelves[,'score']<retrain_elf),'score'] <- 1
myelves
myelves[,'score']<overwork_elf
overwork_elf
head()
head(myelves)
myelves[,'score'] <- 5
myelves[myelves[,'current_rating']<overwork_elf,'score'] <- 4
myelves[myelves[,'current_rating']<train_elf,'score'] <- 2
myelves[myelves[,'current_rating']<retrain_elf,'score'] <- 1
head(myelves)
c_toy_size
c_toy_size <- 2
myelves <- myelves[myelves[,'score']==c_toy_size,]
myelves
c_toy_size <- 5
myelves <- myelves[myelves[,'score']==c_toy_size,]
myelves
nrow(myelves)
nrow(myelves)==0
next_elf!=0
next_elf <- 0
next_elf!=0
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
load('data/toys_classified.RData')
toy_break1 <- 2.5*60; toy_break2 <- 10*60; toy_break3 <- 40*60; toy_break4<- 48*60; exhaustion <- 208*60
toys <- data.matrix(transform(toys, Exhaustion = 0))
toys[which(toys[,'Duration']>=toy_break4),'Size'] <- 5 # 1969432 20% - overwork
toys[which(toys[,'Duration']<toy_break4),'Size'] <- 4 # 52036 0.5% - 48 hour
# toys[which(toys[,'Duration']<toy_break3),'Size'] <- 3 # 366753 3.7% - 40 hour
toys[which(toys[,'Duration']<toy_break2),'Size'] <- 2 # 1202851 12% - 10 hour
toys[which(toys[,'Duration']<toy_break1),'Size'] <- 1 # 6408928 64% - 2.5 hour
toys[which(toys[,'Duration']>=exhaustion),'Exhaustion'] <- 1 # 995590 10% larger than 208 hours
toys[which(toys[,'Duration']<exhaustion),'Exhaustion'] <- 0 # 9004410 90% 208 hour
#########################
### Schedule Strategy ###
#########################
# a: current_rating
# dt: required training time to restore
# di: duration
assign_elf <- function(myelves, di, c_toy_size) {
myelves <- myelves[myelves[,'score']==c_toy_size,]
if(nrow(myelves)==0){
return(0)
}else{
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves[di < a * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
}
#################
### Main Loop ###
#################
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
# retrain_elf <- 0.5; train_elf <- 2.5; overwork_elf <- 3.9
myelves[,'score'] <- 5
myelves[myelves[,'current_rating']<overwork_elf,'score'] <- 4
myelves[myelves[,'current_rating']<train_elf,'score'] <- 2
myelves[myelves[,'current_rating']<retrain_elf,'score'] <- 1
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(toy %% 100000 == 0) cat('\nCompleted', toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
retrain_elf <- 1; train_elf <- 2.5; overwork_elf <- 3.8
submissions <- solution_sortedElf(toys[1:10000,], myelves)
head(myelves)
length(myelves)
assign_elf <- function(myelves, di, c_toy_size) {
myelves <- myelves[myelves[,'score']==c_toy_size,]
if(length(myelves)==5){
return(0)
}else{
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves[di < a * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
}
submissions <- solution_sortedElf(toys[1:10000,], myelves)
nrow(myToys)
myToys <- toys
nrow(myToys)
current_toy <- 10000
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
next_elf
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
next_elf
c_toy_duration
di <- 3
myelves <- myelves[myelves[,'score']==c_toy_size,]
myelves
c_toy_size
myelves[myelves[,'score']
]
myelves
length(myelves)
assign_elf <- function(myelves, di, c_toy_size) {
myelves <- myelves[myelves[,'score']==c_toy_size,]
if(length(myelves)==0){
return(0)
}else{
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves[di < a * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
}
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
load('data/toys_classified.RData')
toy_break1 <- 2.5*60; toy_break2 <- 10*60; toy_break3 <- 40*60; toy_break4<- 48*60; exhaustion <- 208*60
toys <- data.matrix(transform(toys, Exhaustion = 0))
toys[which(toys[,'Duration']>=toy_break4),'Size'] <- 5 # 1969432 20% - overwork
toys[which(toys[,'Duration']<toy_break4),'Size'] <- 4 # 52036 0.5% - 48 hour
# toys[which(toys[,'Duration']<toy_break3),'Size'] <- 3 # 366753 3.7% - 40 hour
toys[which(toys[,'Duration']<toy_break2),'Size'] <- 2 # 1202851 12% - 10 hour
toys[which(toys[,'Duration']<toy_break1),'Size'] <- 1 # 6408928 64% - 2.5 hour
toys[which(toys[,'Duration']>=exhaustion),'Exhaustion'] <- 1 # 995590 10% larger than 208 hours
toys[which(toys[,'Duration']<exhaustion),'Exhaustion'] <- 0 # 9004410 90% 208 hour
retrain_elf <- 1; train_elf <- 2.5; overwork_elf <- 3.8
#########################
### Schedule Strategy ###
#########################
# a: current_rating
# dt: required training time to restore
# di: duration
assign_elf <- function(myelves, di, c_toy_size) {
myelves <- myelves[myelves[,'score']==c_toy_size,]
if(length(myelves)==0){
return(0)
}else{
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves[di < a * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
}
#################
### Main Loop ###
#################
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
# retrain_elf <- 0.5; train_elf <- 2.5; overwork_elf <- 3.9
myelves[,'score'] <- 5
myelves[myelves[,'current_rating']<overwork_elf,'score'] <- 4
myelves[myelves[,'current_rating']<train_elf,'score'] <- 2
myelves[myelves[,'current_rating']<retrain_elf,'score'] <- 1
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(toy %% 100000 == 0) cat('\nCompleted', toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
submissions <- solution_sortedElf(toys[1:10000,], myelves)
myelves
di
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
current_toy <- 10000
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
myToys <- toys
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
c_toy_size
myelves
myelves[,'score'] <- 5
myelves[myelves[,'current_rating']<overwork_elf,'score'] <- 4
myelves[myelves[,'current_rating']<train_elf,'score'] <- 2
myelves[myelves[,'current_rating']<retrain_elf,'score'] <- 1
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
next_elf
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
# retrain_elf <- 0.5; train_elf <- 2.5; overwork_elf <- 3.9
myelves[,'score'] <- 5
myelves[myelves[,'current_rating']<overwork_elf,'score'] <- 4
myelves[myelves[,'current_rating']<train_elf,'score'] <- 2
myelves[myelves[,'current_rating']<retrain_elf,'score'] <- 1
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(toy %% 100000 == 0) cat('\nCompleted', toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
submissions <- solution_sortedElf(toys[1:100,], myelves)
gc(); rm(list=ls())
source('R code/Functions.R')
NUM_ELVES <- 900
myelves <- create_elves(NUM_ELVES)
load('data/toys_classified.RData')
toy_break1 <- 2.5*60; toy_break2 <- 10*60; toy_break3 <- 40*60; toy_break4<- 48*60; exhaustion <- 208*60
toys <- data.matrix(transform(toys, Exhaustion = 0))
toys[which(toys[,'Duration']>=toy_break4),'Size'] <- 5 # 1969432 20% - overwork
toys[which(toys[,'Duration']<toy_break4),'Size'] <- 4 # 52036 0.5% - 48 hour
# toys[which(toys[,'Duration']<toy_break3),'Size'] <- 3 # 366753 3.7% - 40 hour
toys[which(toys[,'Duration']<toy_break2),'Size'] <- 2 # 1202851 12% - 10 hour
toys[which(toys[,'Duration']<toy_break1),'Size'] <- 1 # 6408928 64% - 2.5 hour
toys[which(toys[,'Duration']>=exhaustion),'Exhaustion'] <- 1 # 995590 10% larger than 208 hours
toys[which(toys[,'Duration']<exhaustion),'Exhaustion'] <- 0 # 9004410 90% 208 hour
retrain_elf <- 1; train_elf <- 2.5; overwork_elf <- 3.8
#########################
### Schedule Strategy ###
#########################
# a: current_rating
# dt: required training time to restore
# di: duration
assign_elf <- function(myelves, di, c_toy_size) {
myelves <- myelves[myelves[,'score']==c_toy_size,]
if(length(myelves)==0){
return(0)
}else{
a <- myelves[,'current_rating']
myelves[,'score'] <- 60 * (4*a -1) / (4 * log(1.02)) # >=da
myelves[di < -1440*log(4*a)/(log(1.02)+log(0.9)),'score'] <- a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * (1.02^(10 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * (0.9^(14 * di / 24 * a[di < -1440*log(4*a)/(log(1.02)+log(0.9))])) * 60 * exp(-di*(10*log(1.02) + 14*log(0.9))/(a[di < -1440*log(4*a)/(log(1.02)+log(0.9))] * 1440)-1) # [a * 600, da)
myelves[di < a * 600 ,'score'] <- 0 # < 600 * a
assigned_elf <-as.integer(myelves[order(myelves[,'score'], myelves[,'next_available_time']) ,'elf_id'][1])
return(assigned_elf)
}
}
#################
### Main Loop ###
#################
solution_sortedElf <- function(myToys, myelves){
cat(format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
outcomes <- matrix(0, nrow = nrow(myToys), ncol = 5,
dimnames = list(NULL, c('ToyId', 'ElfId', 'StartTime', 'Duration', 'current_rating')))
for(current_toy in 1:nrow(myToys)){
# retrain_elf <- 0.5; train_elf <- 2.5; overwork_elf <- 3.9
myelves[,'score'] <- 5
myelves[myelves[,'current_rating']<overwork_elf,'score'] <- 4
myelves[myelves[,'current_rating']<train_elf,'score'] <- 2
myelves[myelves[,'current_rating']<retrain_elf,'score'] <- 1
for(toy in current_toy:nrow(myToys)){
c_toy_id <- myToys[toy,'ToyId']
c_toy_arrival <- myToys[toy, 'Arrival_time']
c_toy_duration <- myToys[toy,'Duration']
c_toy_size <- myToys[toy,'Size']
next_elf <- assign_elf(myelves, c_toy_duration, c_toy_size)
if(next_elf!=0) break
}
c_elf_id <- myelves[next_elf, 'elf_id']
c_elf_start_time <- myelves[next_elf, 'next_available_time']
c_elf_rating <- myelves[next_elf, 'current_rating']
if(c_elf_start_time < c_toy_arrival) c_elf_start_time <- c_toy_arrival
work_duration <- as.integer(ceiling(c_toy_duration/c_elf_rating))
myelves[next_elf, 'next_available_time'] <- update_next_available_minute(c_elf_start_time, work_duration)
myelves[next_elf, 'current_rating'] <- update_productivity(c_elf_start_time, work_duration, c_elf_rating)
outcomes[toy,] <- c(c_toy_id, c_elf_id, c_elf_start_time, work_duration, c_elf_rating)
if(toy %% 100000 == 0) cat('\nCompleted', toy/1000000, 'mil toys, makespan', c_elf_start_time, 'minutes',
format(Sys.time(),format = '%Y-%m-%d %H:%M:%S'))
}
cat('\nCompleted 10 mil toys at', convert_to_chardate(c_elf_start_time))
return(outcomes)
}
submissions <- solution_sortedElf(toys[1:100,], myelves)
